--Criação do database
CREATE DATABASE MINIERP_MULT
GO
USE MINIERP_MULT

--Primeiro será criado os cadastros complementares por área
--Sempre devemos iniciar pelo alicerce do projeto
--Aqui será a tabela empresa
--Depois criando tabelas sem dependencias

CREATE TABLE EMPRESA(
COD_EMPRESA INT IDENTITY(1,1) NOT NULL PRIMARY KEY,
NOME_EMPRESA VARCHAR(50),
FANTASIA VARCHAR(20)
);


--Tabela unidade federal

CREATE TABLE UF(
COD_UF VARCHAR(2) NOT NULL PRIMARY KEY,
NOME_UF VARCHAR(30)NOT NULL
)

--Aqui estamos criando a tabela cidades bela UF
CREATE TABLE CIDADES(
COD_CIDADE VARCHAR(7) NOT NULL PRIMARY KEY,
COD_UF VARCHAR(2) NOT NULL,
NOME_MUN VARCHAR(50) NOT NULL,
CONSTRAINT FK_C1D1 FOREIGN KEY (COD_UF) REFERENCES UF(COD_UF) --Referencia do nosso campo COD_UF de cidades com campo COD_uf da tabela UF
)


--Criação da tabela clientes
CREATE TABLE CLIENTES(
COD_EMPRESA INT NOT NULL,
ID_CLIENTE INT IDENTITY(1,1) NOT NULL,
RAZAO_CLIENTE VARCHAR(100)NOT NULL,
FANTASIA VARCHAR(15) NOT NULL,
ENDERECO VARCHAR(50) NOT NULL,
NMR VARCHAR(10) NOT NULL,
BAIRRO VARCHAR(30) NOT NULL,
COD_CIDADE VARCHAR(7) NOT NULL,
CEP VARCHAR(8),
CNPJ_CPF VARCHAR(15),
TIPO_CLIENTE NCHAR(1)  CONSTRAINT CK_TC1 CHECK (TIPO_CLIENTE in ('F', 'J')),
DATA_CADASTRO DATETIME NOT NULL,
COD_PAGTO INT,
CONSTRAINT PK_CLI1 PRIMARY KEY (COD_EMPRESA,ID_CLIENTE),  --Aqui estamos fazendo uma chave composto por 2 primary key(cod_empresa,id_cliente)
CONSTRAINT FK_CLI1 FOREIGN KEY (COD_CIDADE) REFERENCES CIDADES(COD_CIDADE), -- Aqui estamos fazendo um relacionamento entre COD_CIDADE(CLIENTE) com a COD_CIDADE(CIDADE)
CONSTRAINT FK_CLI2 FOREIGN KEY (COD_EMPRESA) REFERENCES EMPRESA(COD_EMPRESA) -- Aqui estamos fazendo um relacionamento entre COD_EMPRESA(CLIENTE) COM A COD_EMPRESA(EMPRESA)
)

CREATE TABLE FORNECEDORES
(
COD_EMPRESA INT NOT NULL,
ID_FOR INT IDENTITY(1,1) NOT NULL,
RAZAO_FORNEC VARCHAR(100) NOT NULL,
FANTASIA VARCHAR(15) NOT NULL,
ENDERECO VARCHAR(50) NOT NULL,
NRO VARCHAR(10) NOT NULL,
BAIRRO VARCHAR(20) NOT NULL,
COD_CIDADE VARCHAR(7) NOT NULL,
CEP VARCHAR(8),
CNPJ_CPF VARCHAR(15),
TIPO_FORNEC NCHAR(1) CONSTRAINT CK_TF1 CHECK (TIPO_FORNEC IN ('F','J')),
DATA_CADASTRO DATETIME NOT NULL,
COD_PAGTO INT,
CONSTRAINT PK_FOR1 PRIMARY KEY (COD_EMPRESA,ID_FOR),
CONSTRAINT FK_FOR1 FOREIGN KEY (COD_CIDADE) REFERENCES CIDADES(COD_CIDADE),
CONSTRAINT FK_FOR2 FOREIGN KEY (COD_EMPRESA) REFERENCES EMPRESA(COD_EMPRESA))

CREATE TABLE TIPO_MAT(
COD_EMPRESA INT NOT NULL,
COD_TIP_MAT INT NOT NULL,
DESC_TIP_MAT VARCHAR (20) NOT NULL,
CONSTRAINT PK_TIP_M1 PRIMARY KEY (COD_EMPRESA, COD_TIP_MAT),
CONSTRAINT FK_TIP_M1 FOREIGN KEY (COD_EMPRESA) REFERENCES EMPRESA(COD_EMPRESA))


CREATE TABLE MATERIAL(
COD_EMPRESA INT NOT NULL,
COD_MAT INT NOT NULL,
DESCRICAO VARCHAR(50) NOT NULL,
PRECO_UNIT DECIMAL(10,2) NOT NULL,
COD_TIP_MAT INT NOT NULL,
ID_FOR INT,
CONSTRAINT PK_MAT1 PRIMARY KEY (COD_EMPRESA,COD_MAT),
CONSTRAINT FK_MAT1 FOREIGN KEY (COD_EMPRESA,COD_TIP_MAT) REFERENCES TIPO_MAT(COD_EMPRESA,COD_TIP_MAT))


CREATE INDEX IX_MAT ON MATERIAL(COD_EMPRESA,COD_TIP_MAT);


CREATE TABLE ORDEM_PROD(
COD_EMPRESA INT NOT NULL,
ID_ORDEM INT IDENTITY(1,1) NOT NULL,
COD_MAT_PROD INT NOT NULL,
QTD_PLAN DECIMAL(10,2) NOT NULL,
QTD_PROD DECIMAL(10,2) NOT NULL,
DATA_INI DATE,
DATA_FIM DATE,
SITUACAO CHAR(1),
CONSTRAINT PK_OP1 PRIMARY KEY(COD_EMPRESA,ID_ORDEM),
CONSTRAINT FK_OP1 FOREIGN KEY (COD_EMPRESA,COD_MAT_PROD) REFERENCES MATERIAL(COD_EMPRESA,COD_MAT))

CREATE TABLE APONTAMENTOS(
COD_EMPRESA INT NOT NULL,
ID_APON INT IDENTITY(1,1) NOT NULL,
ID_ORDEM INT NOT NULL,
COD_MAT_PROD INT,
QTD_APON DECIMAL(10,2),
DATA_APON DATETIME NOT NULL,
CONSTRAINT FK_APON1 FOREIGN KEY (COD_EMPRESA,COD_MAT_PROD) REFERENCES MATERIAL(COD_EMPRESA,COD_MAT),
CONSTRAINT FK_APON2 FOREIGN KEY (COD_EMPRESA,ID_ORDEM) REFERENCES ORDEM_PROD(COD_EMPRESA,ID_ORDEM),
CONSTRAINT PK_APON1 PRIMARY KEY (COD_EMPRESA,ID_APON));


CREATE TABLE FICHA_TECNICA
(
COD_EMPRESA INT NOT NULL,
ID_REF INT IDENTITY(1,1) NOT NULL,
COD_MAT_PROD INT NOT NULL,
COD_MAT_NECES INT NOT NULL,
QTD_NECES DECIMAL(10,2) NOT NULL,
CONSTRAINT FK_FIC1 FOREIGN KEY (COD_EMPRESA,COD_MAT_PROD) REFERENCES MATERIAL(COD_EMPRESA,COD_MAT),
CONSTRAINT FK_FIC2 FOREIGN KEY (COD_EMPRESA,COD_MAT_NECES) REFERENCES MATERIAL(COD_EMPRESA,COD_MAT))


CREATE TABLE CONSUMO
(
COD_EMPRESA INT NOT NULL,
ID_APON INT NOT NULL,
COD_MAT_NECES INT NOT NULL,
QTD_CONSUMIDA DECIMAL(10,2) NOT NULL,
LOTE VARCHAR(20) NOT NULL,
CONSTRAINT FK_CONS1 FOREIGN KEY (COD_EMPRESA,COD_MAT_NECES) REFERENCES MATERIAL(COD_EMPRESA,COD_MAT),
CONSTRAINT FK_CONS2 FOREIGN KEY (COD_EMPRESA, ID_APON) REFERENCES APONTAMENTOS(COD_EMPRESA,ID_APON));

CREATE TABLE ESTOQUE(
COD_EMPRESA INT NOT NULL,
COD_MAT INT NOT NULL,
QTD_SALDO DECIMAL(10,2) NOT NULL,
CONSTRAINT FK_EST1 FOREIGN KEY (COD_EMPRESA,COD_MAT) REFERENCES MATERIAL(COD_EMPRESA,COD_MAT),
CONSTRAINT PK_EST1 PRIMARY KEY (COD_EMPRESA,COD_MAT))

--DROP TABLE ESTOQUE_LOTE
CREATE TABLE ESTOQUE_LOTE
(
COD_EMPRESA INT NOT NULL,
COD_MAT INT NOT NULL,
LOTE VARCHAR(20) NOT NULL,
QTD_LOTE DECIMAL (10,2) NOT NULL,
CONSTRAINT PK_ESTL1 PRIMARY KEY (COD_EMPRESA,COD_MAT,LOTE),
CONSTRAINT FK_ESTL1 FOREIGN KEY (COD_EMPRESA,COD_MAT) REFERENCES MATERIAL(COD_EMPRESA,COD_MAT))

CREATE TABLE ESTOQUE_MOV
(
COD_EMPRESA INT NOT NULL,
ID_MOV INT IDENTITY(1,1) NOT NULL PRIMARY KEY,
TIP_MOV VARCHAR(1),
COD_MAT INT NOT NULL,
LOTE VARCHAR(20) NOT NULL,
QTD DECIMAL(10,2) NOT NULL,
DATA_MOV DATE NOT NULL,
DATA_HORA DATETIME NOT NULL,
CONSTRAINT FK_ESTM1 FOREIGN KEY (COD_EMPRESA,COD_MAT) REFERENCES MATERIAL(COD_EMPRESA,COD_MAT))

CREATE TABLE PED_COMPRAS
(
COD_EMPRESA INT NOT NULL,
NUM_PEDIDO INT NOT NULL,
ID_FOR INT NOT NULL,
COD_PAGTO INT NOT NULL,
DATA_PEDIDO DATE NOT NULL,
DATA_ENTREGA DATE NOT NULL,
SITUACAO NCHAR(1) NOT NULL,
TOTAL_PED DECIMAL (10,2),
CONSTRAINT Fk_PEDC1 FOREIGN KEY (COD_EMPRESA,ID_FOR) REFERENCES FORNECEDORES(COD_EMPRESA,ID_FOR),
CONSTRAINT PK_PEDC1 PRIMARY KEY (COD_EMPRESA,NUM_PEDIDO));


--DROP TABLE PED_COMPRAS_ITENS
CREATE TABLE PED_COMPRAS_ITENS
(
COD_EMPRESA INT NOT NULL,
NUM_PEDIDO INT NOT NULL,
SEQ_MAT INT NOT NULL,
COD_MAT INT NOT NULL,
QTD INT NOT NULL,
VAL_UNIT DECIMAL (10,2) NOT NULL,
CONSTRAINT PK_PEDCIT1 PRIMARY KEY (COD_EMPRESA,NUM_PEDIDO,SEQ_MAT),
CONSTRAINT FK_PEDIT1 FOREIGN KEY (COD_EMPRESA,NUM_PEDIDO) REFERENCES PED_COMPRAS(COD_EMPRESA,NUM_PEDIDO),
CONSTRAINT FK_PEDIT2 FOREIGN KEY (COD_EMPRESA,COD_MAT) REFERENCES MATERIAL(COD_EMPRESA,COD_MAT))


CREATE TABLE CENTRO_CUSTO
(
COD_EMPRESA INT NOT NULL,
COD_CC VARCHAR(4) NOT NULL,
NOME_CC VARCHAR(20) NOT NULL,
CONSTRAINT PK_CC1 PRIMARY KEY (COD_EMPRESA,COD_CC),
CONSTRAINT FK_CC1 FOREIGN KEY (COD_EMPRESA) REFERENCES EMPRESA(COD_EMPRESA));

CREATE TABLE CARGOS
(
COD_EMPRESA INT NOT NULL,
COD_CARGO INT IDENTITY(1,1) NOT NULL,
NOME_CARGO VARCHAR(50),
CONSTRAINT PK_CARG1 PRIMARY KEY (COD_EMPRESA,COD_CARGO),
CONSTRAINT FK_CARG1 FOREIGN KEY (COD_EMPRESA) REFERENCES EMPRESA(COD_EMPRESA));

CREATE TABLE FUNCIONARIO
(
COD_EMPRESA INT NOT NULL,
MATRICULA INT NOT NULL,
COD_CC VARCHAR(4) NOT NULL,
NOME VARCHAR(50) NOT NULL,
RG VARCHAR(15) NOT NULL,
CPF VARCHAR(15) NOT NULL,
ENDERECO VARCHAR(50) NOT NULL,
NUMERO VARCHAR(10) NOT NULL,
BAIRRO VARCHAR(50) NOT NULL,
COD_CIDADE VARCHAR(7) NOT NULL,
DATA_ADMISS DATE NOT NULL,
DATE_DEMISS DATE,
DATA_NASC DATE NOT NULL,
TELEFONE VARCHAR(15) NOT NULL,
COD_CARGO INT NOT NULL,
CONSTRAINT FK_FUNC1 FOREIGN KEY (COD_EMPRESA,COD_CC) REFERENCES CENTRO_CUSTO(COD_EMPRESA,COD_CC),
CONSTRAINT FK_FUNC2 FOREIGN KEY (COD_CIDADE) REFERENCES CIDADES(COD_CIDADE),
CONSTRAINT FK_FUNC3 FOREIGN KEY (COD_EMPRESA,COD_CARGO) REFERENCES CARGOS(COD_EMPRESA,COD_CARGO),
CONSTRAINT PK_FUNC1 PRIMARY KEY (COD_EMPRESA,MATRICULA));


CREATE TABLE SALARIO(
COD_EMPRESA INT NOT NULL,
MATRICULA INT NOT NULL,
SALARIO DECIMAL(10,2) NOT NULL,
CONSTRAINT FK_SAL2 FOREIGN KEY (COD_EMPRESA,MATRICULA) REFERENCES FUNCIONARIO(COD_EMPRESA,MATRICULA),
CONSTRAINT PK_SAL1 PRIMARY KEY (COD_EMPRESA,MATRICULA));


CREATE TABLE FOLHA_PAGTO
(
COD_EMPRESA INT NOT NULL,
MATRICULA INT NOT NULL,
TIPO_PGTO CHAR(1) NOT NULL,
TIPO CHAR(1) NOT NULL,
EVENTO VARCHAR (30) NOT NULL,
MES_REF VARCHAR (2) NOT NULL,
ANO_REF VARCHAR (4) NOT NULL,
DATA_PAGTO DATE NOT NULL,
VALOR DECIMAL(10,2) NOT NULL,
CONSTRAINT Fk_FP1 FOREIGN KEY (COD_EMPRESA,MATRICULA) REFERENCES FUNCIONARIO(COD_EMPRESA,MATRICULA))

CREATE INDEX IX1_FOLHA ON FOLHA_PAGTO(COD_EMPRESA,MATRICULA);


CREATE TABLE USUARIOS
(
COD_EMPRESA INT NOT NULL,
LOGIN VARCHAR(30) NOT NULL PRIMARY KEY,
MATRICULA INT NOT NULL,
SENHA VARCHAR(32) NOT NULL,
SITUACAO CHAR(1) NOT NULL,
CONSTRAINT FK_US1 FOREIGN KEY (COD_EMPRESA,MATRICULA) REFERENCES FUNCIONARIO(COD_EMPRESA,MATRICULA));

CREATE TABLE CONTAS_RECEBER
(
COD_EMPRESA INT NOT NULL,
ID_DOC INT IDENTITY(1,1) NOT NULL PRIMARY KEY,
ID_CLIENTE INT NOT NULL,
ID_DOC_ORIG INT NOT NULL,
PARC INT NOT NULL,
DATA_VENC DATE NOT NULL,
DATA_PAGTO DATE,
VALOR DECIMAL (10,2),
CONSTRAINT FK_CR1 FOREIGN KEY (COD_EMPRESA,ID_CLIENTE) REFERENCES CLIENTES(COD_EMPRESA,ID_CLIENTE))


CREATE TABLE CONTAS_PAGAR
(
COD_EMPRESA INT NOT NULL,
ID_DOC INT IDENTITY(1,1) NOT NULL PRIMARY KEY,
ID_FOR INT NOT NULL,
ID_DOC_ORIG INT NOT NULL,
PARC INT NOT NULL,
DATA_VENC DATE NOT NULL,
DATA_PAGTO DATE,
VALOR DECIMAL(10,2),
CONSTRAINT FK_CP1 FOREIGN KEY (COD_EMPRESA,ID_FOR) REFERENCES FORNECEDORES(COD_EMPRESA,ID_FOR))

CREATE TABLE COND_PAGTO
(
COD_PAGTO INT IDENTITY(1,1) NOT NULL PRIMARY KEY,
NOME_CP VARCHAR(50) NOT NULL
);

CREATE TABLE COND_PAGTO_DET
(
COD_PAGTO INT NOT NULL,
PARC INT NOT NULL,
DIAS INT NOT NULL,
PCT DECIMAL (10,2) NOT NULL,
CONSTRAINT FK_CONDP1 FOREIGN KEY (COD_PAGTO) REFERENCES COND_PAGTO(COD_PAGTO))


CREATE TABLE PED_VENDAS
(
COD_EMPRESA INT NOT NULL,
NUM_PEDIDO INT NOT NULL,
ID_CLIENTE INT NOT NULL,
COD_PAGTO INT NOT NULL,
DATA_PEDIDO DATE NOT NULL,
DATA_ENTREGA DATE NOT NULL,
SITUACAO NCHAR(1) NOT NULL,
TOTAL_PED DECIMAL (10,2),
CONSTRAINT FK_PV1 FOREIGN KEY (COD_EMPRESA,ID_CLIENTE) REFERENCES CLIENTES(COD_EMPRESA,ID_CLIENTE),
CONSTRAINT FK_PV2 FOREIGN KEY (COD_PAGTO) REFERENCES COND_PAGTO(COD_PAGTO),
CONSTRAINT PK_PV1 PRIMARY KEY (COD_EMPRESA,NUM_PEDIDO));


--DROP TABLE PED_VENDAS_ITENS
CREATE TABLE PED_VENDAS_ITENS
(
COD_EMPRESA INT NOT NULL,
NUM_PEDIDO INT NOT NULL,
SEQ_MAT INT NOT NULL,
COD_MAT INT NOT NULL,
QTD INT NOT NULL,
VAL_UNIT DECIMAL(10,2) NOT NULL,
CONSTRAINT FK_PVIT1 FOREIGN KEY (COD_EMPRESA,NUM_PEDIDO) REFERENCES PED_VENDAS(COD_EMPRESA,NUM_PEDIDO),
CONSTRAINT PK_PVIT1 PRIMARY KEY (COD_EMPRESA,NUM_PEDIDO,SEQ_MAT)
)

CREATE TABLE VENDEDORES
(
COD_EMPRESA INT NOT NULL,
MATRICULA INT NOT NULL,
CONSTRAINT FK_VEND1 FOREIGN KEY (COD_EMPRESA,MATRICULA) REFERENCES FUNCIONARIO(COD_EMPRESA,MATRICULA));

CREATE TABLE GERENTES
(
COD_EMPRESA INT NOT NULL,
MATRICULA INT NOT NULL,
CONSTRAINT FK_GER1 FOREIGN KEY (COD_EMPRESA,MATRICULA) REFERENCES FUNCIONARIO(COD_EMPRESA,MATRICULA));



CREATE TABLE CANAL_VENDAS_G_V
(
COD_EMPRESA INT NOT NULL,
MATRICULA_GER INT NOT NULL,
MATRICULA_VEND INT,
CONSTRAINT FK_CGV1 FOREIGN KEY (COD_EMPRESA,MATRICULA_GER) REFERENCES FUNCIONARIO(COD_EMPRESA,MATRICULA),
CONSTRAINT FK_CGV2 FOREIGN KEY (COD_EMPRESA,MATRICULA_VEND) REFERENCES FUNCIONARIO(COD_EMPRESA,MATRICULA),
CONSTRAINT PK_CGV1 PRIMARY KEY (COD_EMPRESA,MATRICULA_GER,MATRICULA_VEND))


CREATE TABLE CANAL_VENDAS_V_C
(
COD_EMPRESA INT NOT NULL,
MATRICULA_VEND INT NOT NULL,
ID_CLIENTE INT NOT NULL,
CONSTRAINT FK_CVC1 FOREIGN KEY (COD_EMPRESA,MATRICULA_VEND) REFERENCES FUNCIONARIO(COD_EMPRESA,MATRICULA),
CONSTRAINT FK_CVC2 FOREIGN KEY (COD_EMPRESA,ID_CLIENTE) REFERENCES CLIENTES(COD_EMPRESA,ID_CLIENTE));

CREATE TABLE META_VENDAS
(
COD_EMPRESA INT NOT NULL,
MATRICULA_VEND INT NOT NULL,
ANO VARCHAR(4) NOT NULL,
MES VARCHAR(2) NOT NULL,
VALOR DECIMAL(10,2),
CONSTRAINT FK_MV1 FOREIGN KEY (COD_EMPRESA,MATRICULA_VEND) REFERENCES FUNCIONARIO(COD_EMPRESA,MATRICULA))

CREATE TABLE CFOP
(
COD_CFOP VARCHAR(5) NOT NULL PRIMARY KEY,
DESC_CFOP VARCHAR(255) NOT NULL)

CREATE TABLE NOTA_FISCAL
(
COD_EMPRESA INT NOT NULL,
NUM_NF INT NOT NULL,
TIP_NF CHAR(1) NOT NULL,
COD_CFOP VARCHAR(5) NOT NULL,
ID_CLIFOR INT NOT NULL,
COD_PAGTO INT NOT NULL,
DATA_EMISSAO DATETIME NOT NULL,
DATA_ENTREGA DATE NOT NULL,
TOTAL_NF DECIMAL(10,2),
INTEGRADA_FIN CHAR(1) DEFAULT ('N'),
INTEGRADA_SUP CHAR(1) DEFAULT ('N'),
CONSTRAINT FK_NF1 FOREIGN KEY (COD_CFOP) REFERENCES CFOP(COD_CFOP),
CONSTRAINT FK_NF2 FOREIGN KEY (COD_PAGTO) REFERENCES COND_PAGTO(COD_PAGTO),
CONSTRAINT PK_NF1 PRIMARY KEY (COD_EMPRESA,NUM_NF))


CREATE TABLE NOTA_FISCAL_ITENS
(
COD_EMPRESA INT NOT NULL,
NUM_NF INT NOT NULL,
SEQ_MAT INT NOT NULL,
COD_MAT INT NOT NULL,
QTD INT NOT NULL,
VAL_UNIT DECIMAL(10,2) NOT NULL,
PED_ORIG INT NOT NULL,
CONSTRAINT FK_NFIT1 FOREIGN KEY (COD_EMPRESA,NUM_NF) REFERENCES NOTA_FISCAL(COD_EMPRESA,NUM_NF),
CONSTRAINT FK_NFIT2 FOREIGN KEY (COD_EMPRESA,COD_MAT) REFERENCES MATERIAL(COD_EMPRESA,COD_MAT))


CREATE TABLE PARAM_INSS
(
VIGENCIA_INI DATE,
VIGENCIA_FIM DATE,
VALOR_DE DECIMAL(10,2) NOT NULL,
VALOR_ATE DECIMAL(10,2) NOT NULL,
PCT DECIMAL(10,2) NOT NULL
)

CREATE TABLE PARAM_IRRF
(
VIGENCIA_INI DATE,
VIGENCIA_FIM DATE,
VALOR_DE DECIMAL(10,2) NOT NULL,
VALOR_ATE DECIMAL (10,2) NOT NULL,
PCT DECIMAL(10,2) NOT NULL,
VAL_ISENT DECIMAL(10,2)
)

CREATE TABLE AUDITORIA_SALARIO
(
COD_EMPRESA INT NOT NULL,
MATRICULA VARCHAR(30) NOT NULL,
SAL_ANTES DECIMAL(10,2) NOT NULL,
SAL_DEPOIS DECIMAL(10,2) NOT NULL,
USUARIO VARCHAR(20) NOT NULL,
DATA_ATUALIZACAO DATETIME NOT NULL,
);

CREATE TABLE PARAMETROS
(
COD_EMPRESA INT NOT NULL,
PARAM VARCHAR(50) NOT NULL,
VALOR INT NOT NULL,
CONSTRAINT FK_PARAM1 FOREIGN KEY (COD_EMPRESA) REFERENCES EMPRESA(COD_EMPRESA),
CONSTRAINT PK_PARAM1 PRIMARY KEY (COD_EMPRESA,PARAM))

CREATE INDEX IX_PARAM1 ON PARAMETROS(COD_EMPRESA,PARAM);



-- ADD CAMPO LOGIN TABELA APONTAMENTOS TREINAR ALTERACAO APOS CRIAR TABELA
ALTER TABLE APONTAMENTOS ADD LOGIN VARCHAR(30) NOT NULL;
-- ADICIONAR CAMPO LOTE NA TABELA APONTAMENTOS
ALTER TABLE APONTAMENTOS ADD LOTE VARCHAR(20) NOT NULL

-- ADD CAMPO LOGIN TABELA ESTOQUE_MOV CRIACAO APOS TABELA USUARIO
ALTER TABLE ESTOQUE_MOV ADD LOGIN VARCHAR(30) NOT NULL;




























-----------------------------Carga de tabelas----------------------
--Inserindo o coração do banco, as empresas
INSERT INTO EMPRESA VALUES ('XYZ BIKES','MATRIZ'),('XYZ BIKES','FILIAL');

SELECT * FROM EMPRESA;

INSERT INTO PARAMETROS VALUES (1,'PED_COMPRAS',0),(1,'MATRICULA',0),(1,'PED_VENDAS',0),(1,'NOTA_FISCAL',0),(2,'PED_COMPRAS',0),(2,'MATRICULA',0),(2,'PED_VENDAS',0),(2,'NOTA_FISCAL',0)

SELECT * FROM PARAMETROS;

--Pegando a referencia para passar os dados para outra tabela
SELECT DISTINCT b.uf,a.estado FROM CURSO.DBO.uf a inner join CURSO.DBO.senso b ON a.cod_uf = b.cod_uf;

--Agora vamos inserir dados na tabela UF, selecionando todos os estados da tabela 
INSERT INTO UF SELECT DISTINCT B.UF, A.estado FROM CURSO.DBO.UF a inner join CURSO.DBO.senso b ON a.cod_uf = b.cod_uf

--Check na tabela
SELECT * FROM UF;

--Pegando a referencia para passar os dados para outra tabela
SELECT * from curso.dbo.senso

--Agira vamos popular a tabela CIDADES, selecionando todas as cidades com seus respectivos cod_uf e juntando uf_cod_mun
INSERT INTO CIDADES SELECT a.uf+cod_mun,uf,a.nome_mun FROM CURSO.dbo.senso a

--Check na tabela
SELECT * FROM cidades;

SELECT * FROM CLIENTES

--Carga tabela clientes
INSERT INTO CLIENTES VALUES 
	(1,'CARLOS JACOB HOUSTON','CARLOS','RUA 1','375','SANTA HELENA','AC00013','13290000','123456987','F',GETDATE(),1),
	(1,'PEDRO LARSON OHIO','PEDRO','RUA 2','235','SANTA CLARA','AC00054','13290987','123456989','F',GETDATE(),2),
	(2,'BIKES ON LTDA','BIKES ON','RUA 14','279','MONTANHA','AC00104','13293245','343456987','J',GETDATE(),3),
	(2,'MY BIKE MY LIFE SA','BIKE LIFE','RUA 23','675','ALPES','AC00179','13379245','11290340','J',GETDATE(),3)



--SELECT * FROM FORNECEDORES

INSERT INTO FORNECEDORES VALUES 
(1,'SO BIKES LTD','SO BIKES','RUA 10','375','SANTA HILDA','AM02009','4839583','1029385738','J',getdate(),1), 
(1,'ESPECIAL BIKES LTD','ESPECIAL BIKES','RUA 51','125','SANTA GENEBRA','BA06899','2839584','1029375849','J',GETDATE(),1),
(2,'MONTA BIKES ME','MONTA BIKES','RUA 12','734','ALADO','GO17401','1029375','1029365849','J',GETDATE(),1),
(2,'TRAIL BIKES ME','TRAIL BIKES', 'RUA 56', '527','ESFERA','MG59308','2938574','9502837485','J',GETDATE(),1)


INSERT INTO TIPO_MAT VALUES (1,1,'MATERIA PRIMA'), (1,2,'PRODUTO ACABADO'), (1,3,'EMBALAGEM'),(1,4,'CONSUMO')
INSERT INTO TIPO_MAT VALUES (2,1,'MATERIA PRIMA'),(2,2,'PRODUTO ACABADO'),(2,3,'EMBALAGEM'),(2,4,'CONSUMO')

--SELECT * FROM TIPO_MAT

--SELECT * FROM MATERIAL

INSERT INTO MATERIAL VALUES 
(1,1,'BICICLETA ARO 29 PRETA MOD INFINITY','2500','2',''),
(1,2,'BICICLETA ARO 29 BRANCA MOD INFINITY','2500','2',''),
(1,3,'QUADRO ARO 29','500','1','1'),
(1,4,'KIT TRANSMISSAO','500','1','1'),
(1,5,'ARO 29','70','1','1'),
(1,6,'PNEU 29','100','1','2'),
(1,7,'CAMARA 29','25','1','2'),
(1,8,'SUSPENSÃO DIANTEIRA','250','1','2'),
(1,9,'BANCO','80','1','3'),
(1,10,'CANOTE','35','1','3'),
(1,11,'TINTA BRANCA','10','4','2'),
(1,12,'TINTA PRETA','10','4','2'),
(1,13,'MESA','500','1','1'),
(1,14,'GUIDON','50','1','2'),
(1,15,'LUVAS','50','1','2'),
(1,16,'CAIXA EMBALAGEM','10','3','2')


INSERT INTO FICHA_TECNICA VALUES (1,'1','3',1),(1,'1','4',1),
(1,'1','5',2),(1,'1','6',2),(1,'1','7',2),(1,'1','8',1),
(1,'1','9',1),(1,'1','10',1),(1,'1','12',0.250),
(1,'1','13',1),(1,'1','14',1),(1,'1','15',2),(1,'1','16',1)


INSERT INTO FICHA_TECNICA VALUES (1,'2','3',1),(1,'2','4',1),
(1,'2','5',2),(1,'2','6',2),(1,'2','7',2),(1,'2','8',1),
(1,'2','9',1),(1,'2','10',1),(1,'2','11',0.250),
(1,'2','13',1),(1,'2','14',1),(1,'2','15',2),(1,'2','16',1)


--SELECT * FROM FICHA_TECNICA

INSERT INTO CENTRO_CUSTO VALUES (1,'9001','PRESIDENCIA')
INSERT INTO CENTRO_CUSTO VALUES (1,'9002','ADMINISTRATIVO')
INSERT INTO CENTRO_CUSTO VALUES (1,'9003','PRODUCAO')
INSERT INTO CENTRO_CUSTO VALUES (1,'9004','SUPRIMENTOS')
INSERT INTO CENTRO_CUSTO VALUES (1,'9005','RH')
INSERT INTO CENTRO_CUSTO VALUES (1,'9006','FINANCEIRO')
INSERT INTO CENTRO_CUSTO VALUES (1,'9007','COMERCIAL')
INSERT INTO CENTRO_CUSTO VALUES (1,'9008','FISCAL')
INSERT INTO CENTRO_CUSTO VALUES (1,'9009','TI')

--SELECT * FROM CENTRO_CUSTO

INSERT INTO CENTRO_CUSTO VALUES (2,'9001','PRESIDENCIA')
INSERT INTO CENTRO_CUSTO VALUES (2,'9002','ADMINISTRATIVO')
INSERT INTO CENTRO_CUSTO VALUES (2,'9003','PRODUCAO')
INSERT INTO CENTRO_CUSTO VALUES (2,'9004','SUPRIMENTOS')
INSERT INTO CENTRO_CUSTO VALUES (2,'9005','RH')
INSERT INTO CENTRO_CUSTO VALUES (2,'9006','FINANCEIRO')
INSERT INTO CENTRO_CUSTO VALUES (2,'9007','COMERCIAL')
INSERT INTO CENTRO_CUSTO VALUES (2,'9008','FISCAL')
INSERT INTO CENTRO_CUSTO VALUES (2,'9009','TI')

INSERT INTO CARGOS VALUES (1,'PRESIDENTE'),(1,'GER COMERCIAL'),(
1,'VENDEDOR'),(1,'GER ADM'),
(1,'ASSISTENTE DE RH'),(1,'OPERADOR PRODUCAO'),
(1,'ESTOQUISTA'),(1,'ANALISTA DE SISTEMA'),
(1,'FATURISTA'),(1,'ASSISTENTE FINANCEIRO')

--Estamos desabilitando a numeração automática dos cargos quando inseridos
SET IDENTITY_INSERT CARGOS ON
--INSERT INTO CARGOS (COD_EMPRESA,COD_CARGO,NOME_CARGO) VALUES (2,10,'ASSISTENTE FINANCEIRO')
GO
INSERT INTO CARGOS(COD_EMPRESA,COD_CARGO,NOME_CARGO)
SELECT 2,COD_CARGO,NOME_CARGO FROM CARGOS
GO
SET IDENTITY_INSERT CARGOS OFF
GO

--SELECT * FROM CARGOS


--DELETE FROM CARGOS WHERE  COD_CARGO = '20'




-- Estre trigger foi criado para controle de numerações de cada matricula de suas respectivas empresas
-- ''instead of insert'' esta dizendo que ao invés de inserir, faça isso
CREATE TRIGGER TG_NUM_MATR ON FUNCIONARIO
INSTEAD OF INSERT AS BEGIN
DECLARE @PARAM VARCHAR(50),@MATRICULA INT,@COD_EMPRESA INT -- DECLARANDO VARIAVEIS
SET @PARAM = 'MATRICULA' -- SETANDO O VALOR DE PARAM
SELECT @MATRICULA = MATRICULA,@COD_EMPRESA = COD_EMPRESA FROM INSERTED -- SETANDO VALORES INICIAIS PARA CODIGO DA EMPRESA E MATRICULA
print(MATRICULA+' '+COD_EMPRESA);
IF @MATRICULA = 0 -- AQUI ESTAMOS VERIFICANDO SE O FUNCIONARIO QUE ESTA TENTANDO CADASTRAR É VALOR 0
BEGIN
SELECT @MATRICULA= VALOR+1 FROM PARAMETROS WHERE PARAM = @PARAM AND COD_EMPRESA = @COD_EMPRESA -- ESTAMOS SETANDO OS VALORES PARA MATRICULA PEGANDO DE BASE O VALOR QUE TEM NA TABELA PARAMETROS
INSERT INTO FUNCIONARIO --INSERINDO INFORMAÇÃO NA TABELA
SELECT COD_EMPRESA,@MATRICULA,COD_CC,NOME,RG,CPF,ENDERECO,NUMERO,BAIRRO,COD_CIDADE,DATA_ADMISS,DATE_DEMISS,DATA_NASC,TELEFONE,COD_CARGO FROM INSERTED WHERE 1=1
UPDATE PARAMETROS SET VALOR = VALOR+1 WHERE PARAM = @PARAM AND COD_EMPRESA = @COD_EMPRESA --AQUI ESTAMOS ATUALIZANDO A TABELA PARAMETROS PARA UM VALOR A MAIS
END
END



INSERT INTO FUNCIONARIO VALUES
 (1,0,'9001','JAMES LABRIE','1234567','123567990','RUA 1','2','SANTA CLAUS','AC00013','2017-01-03','','1980-12-25','','1')
INSERT INTO FUNCIONARIO VALUES
 (1,0,'9002','JONH LARAVEL','1234568','123567889','RUA 2','3','SANTA CLAUS','AC00328','2017-02-10','','1980-12-25','','4')
INSERT INTO FUNCIONARIO VALUES
 (1,0,'9003','PETER DOTNESK','3434568','123564578','RUA 3','4','SANTA CLAUS','AL02801','2017-02-09','','1980-12-25','','6')
INSERT INTO FUNCIONARIO VALUES
 (1,0,'9004','LARA POTTER','4434509','123576867','RUA 4','5','SANTA CLAUS','AL04708','2017-03-07','','1980-12-25','','7')
 INSERT INTO FUNCIONARIO VALUES
 (1,0,'9005','JESSICA SUTER','4534576','120367887','RUA 5','6','SANTA CLAUS','MG35050','2017-03-03','','1980-12-25','','5')
INSERT INTO FUNCIONARIO VALUES
 (1,0,'9006','PEDRO TESLA','4334568','123703885','RUA 6','7','SANTA CLAUS','MG34905','2017-04-15','','1980-12-25','','1')
INSERT INTO FUNCIONARIO VALUES
 (1,0,'9007','TIAGO FIELDER','9834568','147034889','RUA 7','8','SANTA CLAUS','PE07802','2017-04-20','','1980-12-25','','2')
INSERT INTO FUNCIONARIO VALUES
 (1,0,'9007','MALCON DEXTER','9834568','147067889','RUA 17','28','SANTA CLAUS','PB00304','2017-04-20','','1980-12-25','','3')
 INSERT INTO FUNCIONARIO VALUES
 (1,0,'9007','CHARLES NOIX','9894668','147067149','RUA 77','18','SANTA CLAUS','PI05599','2017-04-20','','1980-12-25','','3')
 INSERT INTO FUNCIONARIO VALUES
 (1,0,'9008','JOAO SPARK','7734568','643567888','RUA 8','22','SANTA CLAUS','RN12807','2017-05-07','','1980-12-25','','9')
INSERT INTO FUNCIONARIO VALUES
 (1,0,'9009','DAVID MANDRAKE','6634568','345567887','RUA 8','56','SANTA CLAUS','RS13904','2017-05-07','','1980-12-25','','8')
INSERT INTO FUNCIONARIO VALUES
 (1,0,'9002','SAMUEL DUPRET','8984568','159567887','RUA 23','89','SANTA CLAUS','SC12700','2017-05-07','','1980-12-25','','10')


 --SELECT * FROM FUNCIONARIO
--SELECT * FROM PARAMETROS


INSERT INTO USUARIOS (COD_EMPRESA,LOGIN,MATRICULA,SENHA,SITUACAO) VALUES
(1,'JAMESL','1','','A'),(1,'JONHL','2','','A'),(1,'PETERD','3','','A'),
(1,'LARAP','4','','A'),(1,'JESSICAS','5','','A'),(1,'PEDROT','6','','A'),
(1,'TIAGOF','7','','A'),(1,'MALCOND','8','','A'),(1,'CHARLESN','9','','A'),
(1,'JOAOS','10','','A'),(1,'DAVIDM','11','','A'),(1,'SAMUELD','12','','A')


--SELECT * FROM USUARIOS ORDER BY MATRICULA

UPDATE USUARIOS SET SENHA=CONVERT(VARCHAR(32),HashBytes('MD5',CONVERT(varchar,matricula)),2)


INSERT INTO COND_PAGTO VALUES ('A VISTA'),('3 X 30/60/90 DD'),('30 DD')

INSERT INTO COND_PAGTO_DET VALUES ('1','1',0,100)

INSERT INTO COND_PAGTO_DET VALUES ('2','1',30,33.34),('2','2',30,33.33),('2','3',30,33.3)

INSERT INTO COND_PAGTO_DET VALUES ('3','1',30,100)


-- Estamos aqui inserindo os vendedores tais trazendo o select do codigo e matricula de funcionarios, usando um inner join ele faz uma junção da tabela funcionarios e cargos que tem o mesmo código da empresa e codigo de cargo iguais, colocando um filtro que seleciona somente cargos com o nome vendedor, por fim ainda colocando mais
-- uma condição que concatenando o valor de funcionario que é codigo da empresa e matricula, não podendo conter dentro de vendendor
INSERT INTO VENDEDORES SELECT A.COD_EMPRESA,A.MATRICULA FROM FUNCIONARIO A INNER JOIN CARGOS B ON A.COD_EMPRESA = B.COD_EMPRESA AND A.COD_CARGO = B.COD_CARGO WHERE B.NOME_CARGO = 'VENDEDOR' AND CONCAT(A.COD_EMPRESA,A.MATRICULA) NOT IN (SELECT CONCAT(COD_EMPRESA,MATRICULA) FROM VENDEDORES)

select * from cargos
select * from funcionario

INSERT INTO GERENTES SELECT A.COD_EMPRESA,A.MATRICULA FROM funcionario A INNER JOIN CARGOS B ON A.COD_EMPRESA = B.COD_EMPRESA AND A.COD_CARGO = B.COD_CARGO WHERE B.NOME_CARGO = 'GER COMERCIAL' AND CONCAT(A.COD_EMPRESA,A.MATRICULA) NOT IN (SELECT CONCAT(COD_EMPRESA,MATRICULA) FROM GERENTES)


select distinct a.Nome,a.MATRICULA,a.COD_EMPRESA,b.NOME_CARGO from funcionario a inner join CARGOS b on a.COD_CARGO = b.COD_CARGO 


INSERT INTO CANAL_VENDAS_G_V VALUES (1,7,8),(1,7,9)
SELECT * FROM GERENTES
SELECT * FROM VENDEDORES
SELECT * FROM CANAL_VENDAS_G_V
SELECT * FROM CANAL_VENDAS_V_C

INSERT CANAL_VENDAS_V_C VALUES (1,8,13),(1,9,14)

INSERT INTO META_VENDAS VALUES (1,7,'2018','01',83.33),(1,7,'2018','02',83.33),(1,7,'2018','03',83.33),
(1,7,'2018','04',83.33),(1,7,'2018','05',83.33),(1,7,'2018','06',83.33),(1,7,'2018','07',83.33),
(1,7,'2018','08',83.33),(1,7,'2018','09',83.33),(1,7,'2018','10',83.33),(1,7,'2018','11',83.33),(1,7,'2018','12',83.33)


INSERT INTO META_VENDAS VALUES (1,8,'2018','01',83.33),(1,8,'2018','02',83.33),(1,8,'2018','03',83.33),
(1,8,'2018','04',83.33),(1,8,'2018','05',83.33),(1,8,'2018','06',83.33),(1,8,'2018','07',83.33),
(1,8,'2018','08',83.33),(1,8,'2018','09',83.33),(1,8,'2018','10',83.33),(1,8,'2018','11',83.33),(1,8,'2018','12',83.33)

UPDATE META_VENDAS SET MATRICULA_VEND = 9 where MATRICULA_VEND = 7

SELECT * FROM META_VENDAS
 
INSERT INTO CFOP VALUES ('5.101','VENDAS DE MERC'),('1.101','COMPRAS DE MERC')

SELECT * FROM CFOP

USE MINIERP_MULT

CREATE TRIGGER TG_NUM_PED_V ON PED_VENDAS
INSTEAD OF INSERT AS
BEGIN

DECLARE @PARAM VARCHAR(50),
		@NUM_PEDIDO INT,
		@COD_EMPRESA INT
		
	SET @PARAM = 'PED_VENDAS'

	SELECT @NUM_PEDIDO=NUM_PEDIDO,@COD_EMPRESA = COD_EMPRESA FROM INSERTED
	IF @NUM_PEDIDO IS NULL
		BEGIN
			SELECT @NUM_PEDIDO = VALOR+1 FROM PARAMETROS WHERE
			PARAM = @PARAM AND COD_EMPRESA = @COD_EMPRESA

			INSERT INTO PED_VENDAS SELECT COD_EMPRESA,@NUM_PEDIDO,
			ID_CLIENTE,COD_PAGTO,DATA_PEDIDO,DATA_ENTREGA,SITUACAO,0 FROM INSERTED WHERE 1=1
			UPDATE PARAMETROS SET VALOR = VALOR+1 WHERE PARAM = @PARAM AND COD_EMPRESA = @COD_EMPRESA
			END
			END

SELECT * FROM CLIENTES
SELECT * FROM PED_VENDAS

INSERT INTO PED_VENDAS (COD_EMPRESA,ID_CLIENTE,COD_PAGTO,DATA_PEDIDO,DATA_ENTREGA,SITUACAO) VALUES (1,13,1,'2018-01-13','2018-01-29','A')
INSERT INTO PED_VENDAS (COD_EMPRESA,ID_CLIENTE,COD_PAGTO,DATA_PEDIDO,DATA_ENTREGA,SITUACAO) VALUES (1,14,3,'2018-02-13','2018-02-28','A')
INSERT INTO PED_VENDAS (COD_EMPRESA,ID_CLIENTE,COD_PAGTO,DATA_PEDIDO,DATA_ENTREGA,SITUACAO) VALUES (1,13,2,'2018-03-13','2018-03-29','A')
INSERT INTO PED_VENDAS (COD_EMPRESA,ID_CLIENTE,COD_PAGTO,DATA_PEDIDO,DATA_ENTREGA,SITUACAO) VALUES (1,14,2,'2018-04-13','2018-04-29','A')
INSERT INTO PED_VENDAS (COD_EMPRESA,ID_CLIENTE,COD_PAGTO,DATA_PEDIDO,DATA_ENTREGA,SITUACAO) VALUES (1,14,3,'2018-05-13','2018-05-29','A')
INSERT INTO PED_VENDAS (COD_EMPRESA,ID_CLIENTE,COD_PAGTO,DATA_PEDIDO,DATA_ENTREGA,SITUACAO) VALUES (1,13,3,'2018-06-13','2018-06-29','A')
INSERT INTO PED_VENDAS (COD_EMPRESA,ID_CLIENTE,COD_PAGTO,DATA_PEDIDO,DATA_ENTREGA,SITUACAO) VALUES (1,14,1,'2018-07-13','2018-07-29','A')
INSERT INTO PED_VENDAS (COD_EMPRESA,ID_CLIENTE,COD_PAGTO,DATA_PEDIDO,DATA_ENTREGA,SITUACAO) VALUES (1,13,3,'2018-08-13','2018-08-29','A')
INSERT INTO PED_VENDAS (COD_EMPRESA,ID_CLIENTE,COD_PAGTO,DATA_PEDIDO,DATA_ENTREGA,SITUACAO) VALUES (1,14,2,'2018-09-13','2018-09-29','A')
INSERT INTO PED_VENDAS (COD_EMPRESA,ID_CLIENTE,COD_PAGTO,DATA_PEDIDO,DATA_ENTREGA,SITUACAO) VALUES (1,14,1,'2018-10-13','2018-10-29','A')
INSERT INTO PED_VENDAS (COD_EMPRESA,ID_CLIENTE,COD_PAGTO,DATA_PEDIDO,DATA_ENTREGA,SITUACAO) VALUES (1,13,2,'2018-11-13','2018-11-29','A')
INSERT INTO PED_VENDAS (COD_EMPRESA,ID_CLIENTE,COD_PAGTO,DATA_PEDIDO,DATA_ENTREGA,SITUACAO) VALUES (1,14,2,'2018-12-13','2018-12-29','A')

DELETE FROM PED_VENDAS WHERE NUM_PEDIDO = 2

UPDATE PED_VENDAS SET NUM_PEDIDO = 2 WHERE NUM_PEDIDO = 13
SELECT * FROM PARAMETROS

UPDATE PARAMETROS SET VALOR = 12 WHERE PARAM = 'PED_VENDAS' AND COD_EMPRESA = 1

SELECT * FROM PED_COMPRAS_ITENS

INSERT INTO PED_VENDAS_ITENS VALUES (1,1,1,1,35,2500),
(1,1,2,2,50,2500),(1,2,1,1,70,2500),(1,2,2,2,70,2500),
(1,3,1,1,50,2500),(1,3,2,2,100,2500),(1,4,1,1,35,2500),
(1,4,2,2,50,2500),(1,5,1,1,50,2500),(1,5,2,2,35,2500),
(1,6,1,1,50,2500),(1,6,2,2,70,2500),(1,7,1,1,35,2500),
(1,7,2,2,60,2500),(1,8,1,1,35,2500),(1,8,2,2,70,2500),
(1,9,1,1,100,2500),(1,9,2,2,50,2500),(1,10,1,1,35,2500),
(1,10,2,2,70,2500),(1,11,1,1,100,2500),(1,11,2,2,100,2500),
(1,12,1,1,50,2500),(1,12,2,2,70,2500)

SELECT * FROM PED_VENDAS_ITENS


WITH PED_ITENS(COD_EMPRESA,NUM_PEDIDO,TOTAL) AS
(
SELECT A.COD_EMPRESA,A.NUM_PEDIDO,SUM(A.QTD*A.VAL_UNIT) TOTAL 
FROM PED_VENDAS_ITENS A 
GROUP BY A.COD_EMPRESA,A.NUM_PEDIDO
)
UPDATE PED_VENDAS SET TOTAL_PED = B.TOTAL
FROM PED_VENDAS A INNER JOIN PED_ITENS B
ON A.NUM_PEDIDO = B.NUM_PEDIDO AND A.COD_EMPRESA = B.COD_EMPRESA


INSERT INTO SALARIO VALUES (1,1,7650),(1,2,5764),(1,3,3654)
,(1,4,7854),(1,5,2547),(1,6,6754),(1,7,1325),(1,8,3547)
,(1,9,7896),(1,10,3578),(1,11,7685),(1,12,3457)

INSERT INTO PARAM_INSS VALUES ('2018-01-01','2018-12-31',0,1659.38,8),
('2018-01-01','2018-12-31',1659.39,2765.66,9),('2018-01-01','2018-12-31',2652.42,5531.31,11),
('2018-01-01','2018-12-31',5531.32,99999,0)


--Acabei adicionando a mais ai tive que deletar algumas linhas
INSERT INTO PARAM_IRRF VALUES
('2018-01-01','2018-12-31',0,1903.98,0,0),
('2018-01-01','2018-12-31',1903.99,2852.42,7.5,142.12),
('2018-01-01','2018-12-31',2863.12,3751.23,15,352.42),
('2018-01-01','2018-12-31',3529.31,5664.68,22.5,646.23),('2018-01-01','2018-12-31',4664.32,9999999,27.5,852.25)

SELECT * FROM PARAM_IRRF

DELETE FROM PARAM_IRRF WHERE VALOR_DE < 1










--------------------------PROCEDURES-------------------
USE MINIERP_MULT


--PROCEDURE QUE GERA ORDENS DE PRODUÇÃO COM BASE EM PEDIDOS DE VENDAS
CREATE PROCEDURE PROC_PLAN_ORDEM (@COD_EMPRESA INT,@MES VARCHAR(2),@ANO VARCHAR(4))
AS BEGIN
SET NOCOUNT ON
DECLARE @ERRO_INTERNO INT;
BEGIN TRANSACTION

SELECT A.COD_EMPRESA,A.NUM_PEDIDO FROM PED_VENDAS A WHERE A.COD_EMPRESA = @COD_EMPRESA AND A.SITUACAO = 'A' AND MONTH(A.DATA_ENTREGA) = @MES
AND YEAR(A.DATA_ENTREGA) = @ANO

IF @@ROWCOUNT = 0
BEGIN 
SET @ERRO_INTERNO = 1;
END
	ELSE
		BEGIN
			INSERT INTO ORDEM_PROD
			OUTPUT 'ORDEM PLANEJADA' MSG,INSERTED.COD_EMPRESA,INSERTED.ID_ORDEM,INSERTED.COD_MAT_PROD
			SELECT A.COD_EMPRESA,B.COD_MAT,SUM(B.QTD) AS QTD_PLAN,0 QTD_PROD, @ANO+'-'+@MES+'-01' AS DATA_INI,
			EOMONTH(@ANO+'-'+@MES+'-01') AS DATA_FIM,'A'
			FROM PED_VENDAS A INNER JOIN PED_VENDAS_ITENS B
			ON A.NUM_PEDIDO = B.NUM_PEDIDO AND
			A.COD_EMPRESA = B.COD_EMPRESA
			WHERE A.COD_EMPRESA = @COD_EMPRESA
			AND A.SITUACAO = 'A'
			AND MONTH(A.DATA_ENTREGA) = @MES
			AND YEAR(A.DATA_ENTREGA) = @ANO
			GROUP BY A.COD_EMPRESA,B.COD_MAT;
			PRINT 'INSERT ORDEM PROD REALIZADO';

		UPDATE PED_VENDAS SET SITUACAO = 'P'
		OUTPUT 'PEDIDO PLANEJADO' MSG,INSERTED.NUM_PEDIDO,DELETED.SITUACAO DE,INSERTED.SITUACAO PARA
		WHERE COD_EMPRESA = @COD_EMPRESA
		AND SITUACAO = 'A'
		AND MONTH(DATA_ENTREGA) = @MES
		AND YEAR(DATA_ENTREGA) = @ANO


		PRINT 'PEDIDO SITUACAO ATUALIZADA';
	END

		IF @ERRO_INTERNO = 1
			BEGIN
				ROLLBACK
					RAISERROR('NÃO EXISTEM MATERIAIS PARA PLANJ. ORDEM',
					10,1);
					PRINT 'OPER. CANCELADA ROLLBACK';
				END
			ELSE IF @@ERROR <> 0
				BEGIN
					ROLLBACK
					PRINT ' OPERACAO CANCELADA'
					PRINT @@ERROR
				END
				ELSE
				BEGIN
					COMMIT
					PRINT 'OPERACAO REALIZADA COM SUCESSO'
				END
			END

DROP PROCEDURE PROC_PLAN_ORDEM

EXEC PROC_PLAN_ORDEM 1,1,2018

SELECT * FROM MATERIAL

UPDATE MATERIAL SET ID_FOR = 1 WHERE COD_EMPRESA = 1 AND COD_MAT IN (9,10);


ALTER TABLE PED_COMPRAS_ITENS ALTER COLUMN QTD DECIMAL(10,2)
ALTER TABLE PED_VENDAS_ITENS ALTER COLUMN QTD DECIMAL(10,2)
CREATE PROCEDURE PROC_GER_PED_COMPRAS (@COD_EMPRESA INT,
                                       @MES VARCHAR(2), 
                                       @ANO  VARCHAR(4)) 
AS 
 BEGIN 
 --DECLARANDO TABELA TEMP 
 --VARIAVEL DE TABELA PARA ATRIBUIR SAIDA OUTPUT
DECLARE @PED_AUX TABLE
(
    NUM_PEDIDO_AUX  INT
)
DECLARE @RETORNO TABLE
(
	RET_ORD INT,
	RET_SIT VARCHAR(1)
)
--DECLARANDO VARIAVEIS
DECLARE    	@COD_EMPRESA_AUX INT,
			@MES_AUX VARCHAR(2),
			@ANO_AUX VARCHAR(4),
			@NUM_PEDIDO INT,
			@ID_ORDEM INT,
			@NUM_PEDIDO_AUX INT,
			@COD_MAT INT,
			@ID_FOR INT ,
			@COD_PAGTO INT,
			@DATA_PEDIDO DATE,
			@DATA_ENTREGA DATE ,
			@SITUACAO VARCHAR(1),
			@QTD DECIMAL(10,2),
			@PRECO_UNIT DECIMAL (10,2),
			@CONT_SEQ INT,
			@TOTAL_PED DECIMAL(10,2),
			@ERRO_INTERNO INT

   SET @TOTAL_PED=0;
--INICIA A TRANSACAO
BEGIN TRANSACTION
--INICIA BEGIN TRY
BEGIN TRY  
--CONDICAO PARA GERAR O PEDIDOS MES RETROATIVO
  IF (@MES='1')
	BEGIN
		SET @MES_AUX=12;
		SET @ANO_AUX=@ANO-1;
	END
		ELSE
	BEGIN  
	  SET @MES_AUX=@MES-1;
	  SET @ANO_AUX=@ANO;
    END
--VERIFICANDO SE EXISTEM ORDEM PARA PLANEJ STATUS ABERTO
   SELECT A.COD_EMPRESA,A.ID_ORDEM FROM ORDEM_PROD A
        WHERE A.COD_EMPRESA=@COD_EMPRESA
		AND MONTH(A.DATA_INI)=@MES
		AND YEAR(A.DATA_INI)=@ANO
		AND A.SITUACAO='A'
	
	IF @@ROWCOUNT=0
	BEGIN
		SET @ERRO_INTERNO=1 
	END
    ELSE 
	BEGIN
	 
	--ATRIBUINDO VALORES
	SET @CONT_SEQ=1

--CURSOR PARA GRAVAR CABECALHO PEDIDO DE COMPRAS
--SELECT PARA GERAR NECESSIDADES DE COMPRAS CONFORME ORDEM DE PRODUCAO
--CONFORME FICHA TENICA  E PRODUTO COM SEU FORNECEDOR
DECLARE PED_COMP CURSOR FOR
SELECT distinct A.COD_EMPRESA,C.ID_FOR,D.COD_PAGTO,
      CAST('15-'+@MES_AUX+'-'+@ANO_AUX AS DATE) AS DATA_PEDIDO,
      CAST('15-'+@MES+'-'+@ANO AS DATE)  DATA_ENTREGA,
	'A' SITUACAO
	FROM ORDEM_PROD A
	INNER JOIN FICHA_TECNICA B
	ON A.COD_EMPRESA=B.COD_EMPRESA 
	AND A.COD_MAT_PROD=B.COD_MAT_PROD
	INNER JOIN MATERIAL C
	ON A.COD_EMPRESA=C.COD_EMPRESA
	AND B.COD_MAT_NECES=C.COD_MAT
	INNER JOIN FORNECEDORES D
	ON A.COD_EMPRESA=D.COD_EMPRESA
	AND  C.ID_FOR=D.ID_FOR
	WHERE A.COD_EMPRESA=@COD_EMPRESA
	AND MONTH(A.DATA_INI)=@MES
	AND YEAR(A.DATA_INI)=@ANO
	AND A.SITUACAO='A'
OPEN PED_COMP
FETCH NEXT FROM PED_COMP
	INTO @COD_EMPRESA_AUX,@ID_FOR,@COD_PAGTO,@DATA_PEDIDO,@DATA_ENTREGA,@SITUACAO

WHILE @@FETCH_STATUS = 0
	BEGIN
	--PEGANDO NUMERO DO PEDIDO
	  PRINT 'UPDATE DE PARAMETROS'
	  UPDATE PARAMETROS SET VALOR=VALOR+1
	  OUTPUT INSERTED.VALOR INTO @PED_AUX
	  WHERE COD_EMPRESA=@COD_EMPRESA
	  AND PARAM='PED_COMPRAS';
    
	--ATRIBUINDO VALOR
	SELECT @NUM_PEDIDO_AUX=NUM_PEDIDO_AUX FROM @PED_AUX
	--APRESENTANDO VALORES
	SELECT @COD_EMPRESA COD_EMPRESA,@NUM_PEDIDO_AUX NUM_PEDIDO_AUX,@ID_FOR ID_FOR,@COD_PAGTO COD_PAGTO,
	@DATA_PEDIDO DATA_PEDIDO,@DATA_ENTREGA DATA_ENTREGA,@SITUACAO SITUACAO;
	--REALIZANDO INSERT
	INSERT INTO PED_COMPRAS (COD_EMPRESA,NUM_PEDIDO,ID_FOR,COD_PAGTO,DATA_PEDIDO,DATA_ENTREGA,SITUACAO)
	OUTPUT 'INFOR' AS MSG,INSERTED.COD_EMPRESA,INSERTED.NUM_PEDIDO
	VALUES (@COD_EMPRESA,@NUM_PEDIDO_AUX,@ID_FOR,@COD_PAGTO,@DATA_PEDIDO,@DATA_ENTREGA,@SITUACAO);
	 
	
	--CURSOR DETALHE PED INICIO
	DECLARE PED_COMP_IT CURSOR FOR 
	--SELECT COM PARAMETROS
    SELECT A.COD_EMPRESA,B.COD_MAT_NECES COD_MAT,C.ID_FOR,
       SUM(B.QTD_NECES*A.QTD_PLAN) QTD,C.PRECO_UNIT
		FROM ORDEM_PROD A
		INNER JOIN FICHA_TECNICA B
		ON A.COD_EMPRESA=B.COD_EMPRESA
		AND A.COD_MAT_PROD=B.COD_MAT_PROD
		INNER JOIN MATERIAL C
		ON A.COD_EMPRESA=C.COD_EMPRESA
		AND B.COD_MAT_NECES=C.COD_MAT
		INNER JOIN FORNECEDORES D
		ON A.COD_EMPRESA=D.COD_EMPRESA
		AND C.ID_FOR=D.ID_FOR
		WHERE A.COD_EMPRESA=@COD_EMPRESA
		AND MONTH(A.DATA_INI)=@MES
		AND YEAR(A.DATA_INI)=@ANO
		AND A.SITUACAO='A' --ABERTA
		AND C.ID_FOR=@ID_FOR
		GROUP BY A.COD_EMPRESA,B.COD_MAT_NECES,C.ID_FOR,C.PRECO_UNIT
--ABRINDO CURSOR
OPEN PED_COMP_IT
--LENDO REGISTROS
FETCH NEXT FROM PED_COMP_IT
--INSERINDO VALORES
INTO  @COD_EMPRESA,@COD_MAT,@ID_FOR,@QTD,@PRECO_UNIT
--INICIO WHILE
WHILE @@FETCH_STATUS = 0
	BEGIN
	  --VERIFICACOES PARA CONTADOR DE SEQ MATERIAL E TOTAL_PED
	  IF (@NUM_PEDIDO<>@NUM_PEDIDO_AUX)
	BEGIN 
	  SET @CONT_SEQ=1;
	  SET @TOTAL_PED=0;  
	END
	    --INSERINDO REGISTRO NA PED_COMPRAS_ITENS
		
		INSERT INTO PED_COMPRAS_ITENS VALUES 
		(@COD_EMPRESA,@NUM_PEDIDO_AUX,@CONT_SEQ,@COD_MAT,@QTD,@PRECO_UNIT);
		--APRESENTANDO VALORES
		select @COD_EMPRESA COD_EMPRESA,@NUM_PEDIDO_AUX NUM_PEDIDO_AUX,@CONT_SEQ CONT_SEQ,
		      @COD_MAT COD_MAT,@QTD QTD,@PRECO_UNIT PRECO_UNIT;
		--ATRIBUINDO VALORES
		
		SET @NUM_PEDIDO=@NUM_PEDIDO_AUX;
		SET @CONT_SEQ=@CONT_SEQ+1;
		SET @TOTAL_PED=@TOTAL_PED+(@QTD*@PRECO_UNIT);

		--LENDO PROXIMA LINHA DO CURSOR
		FETCH NEXT FROM PED_COMP_IT	   
        INTO  @COD_EMPRESA,@COD_MAT,@ID_FOR,@QTD,@PRECO_UNIT
	   
END 
CLOSE PED_COMP_IT
DEALLOCATE PED_COMP_IT
  
  SELECT @NUM_PEDIDO PEDIDO,@TOTAL_PED AS TOTAL_PEDIDO
  --ATUALIZANDO TOTAL PEDIDO
  UPDATE PED_COMPRAS SET TOTAL_PED=@TOTAL_PED
  WHERE COD_EMPRESA=@COD_EMPRESA
  AND NUM_PEDIDO=@NUM_PEDIDO;

--CURSO DETALHE PED FIM
--LENDO PROXIMA LINHA DO CURSOR PED_COMP
	FETCH NEXT FROM PED_COMP
    INTO @COD_EMPRESA,@ID_FOR,@COD_PAGTO,@DATA_PEDIDO,@DATA_ENTREGA,@SITUACAO;
    PRINT @NUM_PEDIDO_AUX;
    SET @NUM_PEDIDO=@NUM_PEDIDO_AUX;
 
END   

CLOSE PED_COMP
DEALLOCATE PED_COMP	
END
  --VALIDACOES FINAIS
	IF @@ERROR <>0 
	 BEGIN 
		ROLLBACK 
		PRINT 'OPERACAO CANCELADA'
	END
	ELSE IF @ERRO_INTERNO=1
	 BEGIN 
		ROLLBACK 
		PRINT 'ORDEM NAO EXISTE OU NAO ABERTA'
	 END
	 ELSE
		BEGIN
		    --ATUALIZANDO STATUS DA ORDEM PARA NAO GERAR MAIS DEMANDAS DE COMPRAS
		    
			UPDATE  ORDEM_PROD SET SITUACAO='P'
			OUTPUT INSERTED.ID_ORDEM,INSERTED.SITUACAO INTO @RETORNO
			WHERE COD_EMPRESA=@COD_EMPRESA
			AND MONTH(DATA_INI)=@MES
			AND YEAR(DATA_INI)=@ANO
			AND SITUACAO='A';
		    
			SELECT * FROM @RETORNO
		
		    PRINT 'OPERACAO FINALIZADA COM SUCESSO'
			COMMIT TRANSACTION
		END
	END TRY
	BEGIN CATCH
		SELECT  
        ERROR_NUMBER() AS ErrorNumber,  
        ERROR_SEVERITY() AS ErrorSeverity , 
        ERROR_STATE() AS ErrorState,
        ERROR_PROCEDURE() AS ErrorProcedure , 
        ERROR_LINE() AS ErrorLine,  
        ERROR_MESSAGE() AS ErrorMessage;  

		IF (SELECT CURSOR_STATUS('global', 'PED_COMP')) = 1 
		BEGIN
			CLOSE PED_COMP	
			DEALLOCATE PED_COMP	
		END
		IF (SELECT CURSOR_STATUS('global', 'PED_COMP_IT')) = 1 
		BEGIN
			CLOSE PED_COMP_IT	
			DEALLOCATE PED_COMP_IT	
		END	
		
		SET XACT_ABORT ON;
		IF @@TRANCOUNT > 0  
        ROLLBACK TRANSACTION;  
	 
	END CATCH

END

EXEC PROC_GER_PED_COMPRAS  @COD_EMPRESA=1,
                           @MES=2, 
                           @ANO=2018 
--ANALISANDO



SELECT * FROM ORDEM_PROD
SELECT * FROM PED_COMPRAS
SELECT * FROM PED_COMPRAS_ITENS
SELECT * FROM PARAMETROS
--CONFERINDO TOTAL DO PEDIDO COM TOTAL DETALHES ITENS
SELECT A.NUM_PEDIDO,TOTAL_PED, SUM(B.QTD*B.VAL_UNIT) TOT_ITENS
FROM 
PED_COMPRAS A
INNER JOIN PED_COMPRAS_ITENS B
ON A.COD_EMPRESA=B.COD_EMPRESA
AND A.NUM_PEDIDO=B.NUM_PEDIDO
GROUP BY A.NUM_PEDIDO,TOTAL_PED

--TESTES
SELECT * FROM MATERIAL
WHERE COD_MAT NOT IN (SELECT COD_MAT FROM PED_COMPRAS_ITENS)

SELECT * FROM FICHA_TECNICA
















-- EXEC PROC_GERA_ESTOQUE  'S',2,'ABF',50,'2017-01-31'
--drop PROCEDURE PROC_GERA_ESTOQUE
--ATUALIZA OU INSERE NA TABELAS:
--ESTOQUE, ESTOQUE_LOTE, ESTOQUE_MOV
CREATE PROCEDURE PROC_GERA_ESTOQUE (@COD_EMPRESA INT,
                                   @TIPO_MOV VARCHAR(1), --E ENTRADA, S-SAIDA
                                   @COD_MAT  INT, 
                                   @LOTE     VARCHAR(15), 
                                   @QTD_MOV  DECIMAL(10, 2),
								   @DATA_MOVTO DATE) 
AS 
 BEGIN 
    SET NOCOUNT ON 
	DECLARE @ERRO_INTERNO INT;
	--INICIA TRANSACAO
    BEGIN TRANSACTION 
	--INICIA BEGIN TRY
	BEGIN TRY
	-- VERIFICANDO SE MATERIAL EXISTE
	SELECT COUNT(*) from MATERIAL WHERE COD_EMPRESA=@COD_EMPRESA AND COD_MAT=@COD_MAT
	
	IF 	@@ROWCOUNT=0
		BEGIN
		RAISERROR ('MATERIAL NAO EXISTE', -- Message text.  
                    10, -- Severity.  
                    1 -- State.  
                   ); 
		SET @ERRO_INTERNO=2
		END 
		ELSE
		BEGIN
		--ESTRUTURA DE SAIDA
			IF (@tipo_mov <> 'S' AND @tipo_mov <> 'E' )
				BEGIN
					SET @ERRO_INTERNO=3
				END 
			--SE MATERIA SAIDA
			ELSE IF ( @tipo_mov = 'S' ) 
				BEGIN 
				--SE SALDO<QTD MOV OR
				--SE SALDO LOTE< QTD MOV
				--SE REGISTRO NAO EXISTE NEM ESTOQUE NEM ESTOQUE LOTE
				--ATRIBUI ERROR =1  
					IF ( (SELECT TOP 1 QTD_SALDO 
					FROM   ESTOQUE 
					WHERE  COD_EMPRESA=@COD_EMPRESA 
					       AND @COD_MAT = COD_MAT) < @QTD_MOV 
					OR (SELECT TOP 1 QTD_LOTE
						FROM   ESTOQUE_LOTE 
						WHERE  COD_EMPRESA=@COD_EMPRESA 
						       AND @COD_MAT = COD_MAT 
							   AND LOTE = @LOTE) < @QTD_MOV 
					OR (SELECT Count(*) 
						FROM   ESTOQUE 
						WHERE  COD_EMPRESA=@COD_EMPRESA AND @COD_MAT = COD_MAT ) = 0 
					OR (SELECT Count(*) 
						FROM   ESTOQUE_MOV 
						WHERE  COD_EMPRESA=@COD_EMPRESA AND 
						       @COD_MAT = COD_MAT 
							   AND LOTE = @LOTE) = 0 ) 
						BEGIN 
							SET @ERRO_INTERNO=1
						END 
					ELSE 
				   BEGIN 
				   --ATUALIZA ESTOQUE
					UPDATE ESTOQUE 
					SET    QTD_SALDO = QTD_SALDO - @QTD_MOV 
					WHERE  COD_EMPRESA=@COD_EMPRESA AND  
					       @COD_MAT = COD_MAT ;
					--ATUALIZA ESTOQUE_LOTE
					UPDATE ESTOQUE_LOTE 
					SET    QTD_LOTE = QTD_LOTE - @QTD_MOV 
					WHERE  COD_EMPRESA=@COD_EMPRESA AND 
					       @COD_MAT = COD_MAT 
						   AND LOTE = @LOTE 
                    --INSERT DE MOVIMENTACAO
					INSERT ESTOQUE_MOV 
					VALUES (@COD_EMPRESA,
					        @TIPO_MOV, 
							@COD_MAT, 
							@LOTE, 
							@QTD_MOV,
							@DATA_MOVTO, 
							Getdate(),
							SYSTEM_USER)
                        

                PRINT 'Baixa Realizada' 
            END 
      END 
	  --OPERACAO DE ENTRADA
    IF ( @TIPO_MOV = 'E' ) 
      BEGIN 
	      --SE EXISTE MATERIAL ESTOQUE ATUALIZA SALDO
          IF (SELECT Count(*) 
              FROM   ESTOQUE 
              WHERE  COD_EMPRESA=@COD_EMPRESA AND  COD_MAT = @COD_MAT) > 0 
            BEGIN 
                UPDATE ESTOQUE 
                SET    QTD_SALDO = QTD_SALDO + @QTD_MOV
                WHERE  COD_EMPRESA=@COD_EMPRESA AND  COD_MAT = @COD_MAT

                PRINT 'tem estoque faz update' 
            END 
          ELSE 
		    --SENAO REALIZA INSERT
            BEGIN 
                INSERT INTO ESTOQUE 
                VALUES      (@COD_EMPRESA,
				             @COD_MAT, 
                             @QTD_MOV) 

                PRINT 'insert estoque' 
            END 
          --SE EXISTE MATERIAL ESTOQUE_LOTE ATUALIZA SALDO
          IF (SELECT Count(*) 
              FROM   ESTOQUE_LOTE 
              WHERE  COD_EMPRESA=@COD_EMPRESA 
			         AND COD_MAT = @COD_MAT
                     AND LOTE = @LOTE) > 0 
            BEGIN 
                UPDATE ESTOQUE_LOTE 
                SET    QTD_LOTE = QTD_LOTE + @QTD_MOV
                WHERE  COD_EMPRESA=@COD_EMPRESA 
					   AND COD_MAT = @COD_MAT 
                       AND LOTE = @LOTE

                PRINT 'tem estoque_lote faz update' 
            END 
          ELSE 
		  -- SENAO FAZ INSERT
            BEGIN 
                INSERT INTO ESTOQUE_LOTE 
                VALUES      (@COD_EMPRESA,
				             @COD_MAT, 
                             @LOTE, 
                             @QTD_MOV) 

                PRINT 'insert estoque_lote' 
            END 
          --INSERE MOVIMENTACAO 
          INSERT ESTOQUE_MOV 
          VALUES (@COD_EMPRESA,
		          @TIPO_MOV, 
                  @COD_MAT, 
                  @LOTE, 
                  @QTD_MOV,
				  @DATA_MOVTO,  
                  Getdate(),
				  SYSTEM_USER); 
		 PRINT 'insert Mov_estoque' 
      END 
END
 --VALIDACOES FINAIS
	IF @@ERROR <> 0 
		BEGIN
		  ROLLBACK
		  PRINT @@error
		  PRINT 'OPERACAO CANCELADA' 
		END
	ELSE IF @ERRO_INTERNO=1
		BEGIN
		 ROLLBACK
		 RAISERROR ('Estoque Negativo', -- Message text.  
                      10, -- Severity.  
                      1 -- State.  
                      ); 
		  PRINT 'Operacao Cancelada Rollback'	
        END
	ELSE IF @ERRO_INTERNO=2
		BEGIN
		 ROLLBACK
		 RAISERROR ('Material nao existe', -- Message text.  
                      10, -- Severity.  
                      1 -- State.  
                      ); 
		  PRINT 'Operacao Cancelada Rollback'	
        END
	ELSE IF @ERRO_INTERNO=3
		BEGIN
		 ROLLBACK
		 RAISERROR ('OPERACAO NAO PERMITIDA', -- Message text.  
                      10, -- Severity.  
                      1 -- State.  
                      ); 
		  PRINT 'Operacao Cancelada Rollback'	
        END
	ELSE
		BEGIN
			COMMIT
		    PRINT 'Operacao Concluida com Sucesso'
		END 
	--FIM TRY
	END TRY
	--INICIA BEGIN CATCH
	BEGIN CATCH
		SELECT  
        ERROR_NUMBER() AS ErrorNumber,  
        ERROR_SEVERITY() AS ErrorSeverity , 
        ERROR_STATE() AS ErrorState,
        ERROR_PROCEDURE() AS ErrorProcedure , 
        ERROR_LINE() AS ErrorLine,  
        ERROR_MESSAGE() AS ErrorMessage;  

		SET XACT_ABORT ON;
		IF @@TRANCOUNT > 0  
        ROLLBACK TRANSACTION;  
	 --FINAL CATCH
	END CATCH
	--FIM PROC
 END   


 --TESTE PROC
 --PARAMTRO EMPRESA,MOVIMENTO,MATERIAL, LOTE, QTD, DATE
 EXEC PROC_GERA_ESTOQUE  1,'x',2,'ABF',50,'2017-01-31'

 EXEC PROC_GERA_ESTOQUE  1,'S',2,'ABF',50,'2017-01-29'

 EXEC PROC_GERA_ESTOQUE  1,'E',2,'ABF',50,'2017-01-31'

 EXEC PROC_GERA_ESTOQUE  1,'S',2,'ABF',51,'2017-01-31'

 EXEC PROC_GERA_ESTOQUE  1,'E',2,'ABC',30,'2017-01-31'

 EXEC PROC_GERA_ESTOQUE  1,'S',2,'ABF',49,'2017-01-31'
 EXEC PROC_GERA_ESTOQUE  1,'E',1,'ABF',50,'2017-01-31'

 SELECT * FROM ESTOQUE
 SELECT * FROM ESTOQUE_LOTE
 SELECT * FROM ESTOQUE_MOV
 --ZERANDO CONTADOR IDENTITY
 DBCC CHECKIDENT ('ESTOQUE_MOV',RESEED,0);  

 
DELETE FROM ESTOQUE
DELETE FROM ESTOQUE_LOTE
DELETE FROM ESTOQUE_MOV













--PROC_GERA_NF
--TABELAS ORIGEM PED_VENDAS, PED_VENDAS_ITENS, PED_COMPRAS, PED_COMPRAS_ITENS
--TABELAS DESTINO NOTA_FISCAL, NOTA_FISCAL_ITENS
--ATUALIZA STATUS PEDIDOS COMO SITUACAO =F FINALIZADO
--DROP  PROCEDURE PROC_GERA_NF 
--FASE 1 PEDIDO DE VENDA
--FASE 2 ORDEM DE PRODUCAO
--FASE 3 PEDIDO DE COMPRAS
--FASE 4 GERA ESTOQUE
--FASE 5 GERA NOTAS FISCAIS E/S 
--PARAMETROS @COD_EMPRESA,@TIP_MOV,@DOCTO,@CFOP,@DATA_EMIS,@DATA_ENTREGA
--EXEC PROC_GERA_NF 'S',4,'5.101','2017-01-30','2017-01-30'

--OBS AJUSTE O CAMPO QTD TABELA NF_FISCAL_ITENS PARA DECIMAL(10,2)
ALTER TABLE NOTA_FISCAL_ITENS ALTER COLUMN QTD DECIMAL(10,2)

CREATE  PROCEDURE PROC_GERA_NF (@COD_EMPRESA INT,
                               @TIP_MOV AS CHAR(1),--E = ENTRADA S= SAIDA
                               @DOCTO INT, --PEDIDO DE VENDA SAIDA- PEDIDO COMPPRAS -ENTRADA
							   @CFOP VARCHAR(5),
							   @DATA_EMIS DATE,
							   @DATA_ENTREGA DATE)
AS 
 BEGIN 
 --ATRIBUIR VALOR DO OUTPUT
DECLARE @NOTA_TB TABLE
(
    NF  INT
)
--DECLARA VARIAVEIS
DECLARE @DOCT INT,
        @NUM_NF INT,
		@ID INT,
		@COD_PAGTO INT,
		@NUM_PEDIDO INT,
		@SEQ_MAT INT,
		@COD_MAT INT,
		@QTD DECIMAL(10,2),
		@VAL_UNIT DECIMAL (10,2),
		@SUB_TOT_NFE DECIMAL(10,2),
		@TOTAL_NFE DECIMAL(10,2),
		@ERRO_INTERNO INT

		SET @SUB_TOT_NFE=0
		SET @TOTAL_NFE=0 
--INICIA TRANSAÇÃO
BEGIN TRANSACTION
--INICIA BEGIN TRY
BEGIN TRY

		IF (@DATA_EMIS>GETDATE() OR @DATA_ENTREGA>GETDATE())
		BEGIN
			PRINT 'NAO PERMITIDO LANCAMENTOS FUTUROS!' 
			SET @ERRO_INTERNO=1
		END
		ELSE IF @TIP_MOV<>'S' AND  @TIP_MOV<>'E'
		BEGIN 
			PRINT 'OPERACAO NAO PERMITIDA E CANCELADA!'
			SET @ERRO_INTERNO=1
		END
		ELSE IF @TIP_MOV='S' AND (SELECT COUNT(*) FROM PED_VENDAS A
		   WHERE COD_EMPRESA=@COD_EMPRESA AND A.NUM_PEDIDO=@DOCTO
		         AND A.SITUACAO<>'F')=0
		BEGIN 
		   PRINT 'NAO A PEDIDO DE VENDAS DISPONIVEL PARA SAIDA'
		   SET @ERRO_INTERNO=1
		END 
		ELSE IF @TIP_MOV='E' AND (SELECT COUNT(*) FROM PED_COMPRAS A
		   WHERE COD_EMPRESA=@COD_EMPRESA AND A.NUM_PEDIDO=@DOCTO
		         AND A.SITUACAO<>'F')=0
		BEGIN 
		   PRINT 'NAO A PEDIDO DE COMPRAS DISPONIVEL PARA ENTRADA'
		   SET @ERRO_INTERNO=1
		END 
--INICIO NOTA FISCAL DE SAIDA
		ELSE IF @TIP_MOV='S' 
		BEGIN 
		--ABRINDO CURSOR SAIDA
		DECLARE NOTA_FISCAL CURSOR FOR 

		SELECT A.COD_EMPRESA,A.NUM_PEDIDO,A.ID_CLIENTE,A.COD_PAGTO
		FROM  PED_VENDAS A
		WHERE A.COD_EMPRESA=@COD_EMPRESA
		AND A.NUM_PEDIDO=@DOCTO
		AND A.SITUACAO<>'F' --FINALIZADO

		OPEN NOTA_FISCAL
		FETCH NEXT FROM NOTA_FISCAL
		INTO @COD_EMPRESA,@NUM_PEDIDO,@ID,@COD_PAGTO
		WHILE @@FETCH_STATUS = 0
		BEGIN

		--PEGANDO NUMERO DO PEDIDO
		PRINT 'UPDATE DE PARAMETROS'
		UPDATE PARAMETROS SET VALOR=VALOR+1
		OUTPUT INSERTED.VALOR INTO @NOTA_TB
		WHERE COD_EMPRESA=@COD_EMPRESA
		AND PARAM='NOTA_FISCAL';
		
		--ATRIBUI NUMERO NF A VARIALVEL
		SELECT @NUM_NF=NF FROM @NOTA_TB

		--SELECT * FROM PARAMETROS
			INSERT INTO NOTA_FISCAL 
			OUTPUT INSERTED.NUM_NF --VISUALIZA NF
			VALUES
			(@COD_EMPRESA,@NUM_NF,@TIP_MOV,@CFOP,@ID,@COD_PAGTO,@DATA_EMIS,@DATA_ENTREGA,0,'N','N')
			PRINT @@ERROR

			--IMPRIMININDO CABECALHO
			SELECT @COD_EMPRESA COD_EMPRESA,@NUM_NF NUM_NF,@TIP_MOV TIP_MOV,@CFOP CFOP,@ID ID,@COD_PAGTO COD_PAGTO,
			@DATA_EMIS DAT_EMIS,@DATA_ENTREGA DATA_ENTREG

	--INICIO CURSOR DETALHES NFE
	--CURSOR DETALHE PED INICIO
	DECLARE NF_ITENS CURSOR FOR 
	SELECT A.COD_EMPRESA,A.SEQ_MAT,A.COD_MAT,A.QTD,A.VAL_UNIT 
		FROM PED_VENDAS_ITENS A
		WHERE COD_EMPRESA=@COD_EMPRESA
		AND A.NUM_PEDIDO=@DOCTO
		ORDER BY A.SEQ_MAT

	OPEN NF_ITENS
		FETCH NEXT FROM NF_ITENS
		INTO @COD_EMPRESA,@SEQ_MAT,@COD_MAT,@QTD,@VAL_UNIT
		WHILE @@FETCH_STATUS = 0
			BEGIN
			INSERT INTO NOTA_FISCAL_ITENS VALUES
			(@COD_EMPRESA,@NUM_NF,@SEQ_MAT,@COD_MAT,@QTD,@VAL_UNIT,@DOCTO);
			PRINT @@ERROR
			--APRESENTANDO VALORES
			SELECT @COD_EMPRESA COD_EMPRESA,@NUM_NF NUM_NF,@SEQ_MAT SEQ ,@COD_MAT COD_MAT,@QTD QTD ,
			@VAL_UNIT VAL_UNIT,@DOCTO PED_ORIG
			--ATRIBUINDO VALORES
			SET @SUB_TOT_NFE=@QTD*@VAL_UNIT;
			SET @TOTAL_NFE=@TOTAL_NFE+@SUB_TOT_NFE;
			--SELECT @TOTAL_NFE
		FETCH NEXT FROM NF_ITENS
		INTO @COD_EMPRESA,@SEQ_MAT,@COD_MAT,@QTD,@VAL_UNIT
		END
	  
		CLOSE NF_ITENS;
        DEALLOCATE NF_ITENS;
	--FINAL CURSOR DETALHES
	  
	   --ATUALIZANDO TOTAL NFE
		UPDATE NOTA_FISCAL SET TOTAL_NF=@TOTAL_NFE WHERE COD_EMPRESA=@COD_EMPRESA AND NUM_NF=@NUM_NF;
		--ATUALIZADO STATUS PARA FECHADO NFE
		UPDATE PED_VENDAS  SET SITUACAO='F' WHERE COD_EMPRESA=@COD_EMPRESA AND NUM_PEDIDO=@DOCTO;

		FETCH NEXT FROM NOTA_FISCAL
		INTO @COD_EMPRESA,@NUM_PEDIDO,@ID,@COD_PAGTO
	END
	--FINAL CURSOR NFE
	CLOSE NOTA_FISCAL;
    DEALLOCATE NOTA_FISCAL;
  END --END IF SAIDA
  --FIM NOTA FISCAL DE SAIDA
  --INICIO NOTA FISCAL ENTRADA
  ELSE IF @TIP_MOV='E' 
		BEGIN 
		
		DECLARE NOTA_FISCAL CURSOR FOR 

		SELECT @COD_EMPRESA,A.NUM_PEDIDO,A.ID_FOR,A.COD_PAGTO
		FROM  PED_COMPRAS A
		WHERE COD_EMPRESA=@COD_EMPRESA
		AND A.NUM_PEDIDO=@DOCTO
		AND A.SITUACAO<>'F' --FINALIZADO

		OPEN NOTA_FISCAL
		FETCH NEXT FROM NOTA_FISCAL
		INTO @COD_EMPRESA,@NUM_PEDIDO,@ID,@COD_PAGTO
		WHILE @@FETCH_STATUS = 0
			BEGIN
		
		--PEGANDO NUMERO DO PEDIDO
		PRINT 'UPDATE DE PARAMETROS'
		UPDATE PARAMETROS SET VALOR=VALOR+1
		OUTPUT INSERTED.VALOR INTO @NOTA_TB
		WHERE COD_EMPRESA=@COD_EMPRESA
		AND PARAM='NOTA_FISCAL';
		
		--ATRIBUI NUMERO NF A VARIALVEL
		SELECT @NUM_NF=NF FROM @NOTA_TB
    --INSERINDO REGISTO
			INSERT INTO NOTA_FISCAL 
			VALUES
			(@COD_EMPRESA,@NUM_NF,@TIP_MOV,@CFOP,@ID,@COD_PAGTO,@DATA_EMIS,@DATA_ENTREGA,0,'N','N')
			PRINT @@ERROR
			
			--APRESENTANDO VALORES CABECALHO
			SELECT @COD_EMPRESA COD_EMPRESA,@NUM_NF NUM_NF,@TIP_MOV TIP_MOV,@CFOP CFOP,@ID ID,@COD_PAGTO COD_PAGTO,
			@DATA_EMIS DAT_EMIS,@DATA_ENTREGA DATA_ENTREG

	--INICIO CURSRO DETALHES NFE
	--CURSOR DETALHE PED INICIO
	DECLARE NF_ITENS CURSOR FOR 

	SELECT @COD_EMPRESA COD_EMPRESA,A.SEQ_MAT,A.COD_MAT,A.QTD,A.VAL_UNIT 
		FROM PED_COMPRAS_ITENS A
		WHERE COD_EMPRESA=@COD_EMPRESA
		AND A.NUM_PEDIDO=@DOCTO
		ORDER BY A.SEQ_MAT

	OPEN NF_ITENS
		FETCH NEXT FROM NF_ITENS
		INTO @COD_EMPRESA,@SEQ_MAT,@COD_MAT,@QTD,@VAL_UNIT
		WHILE @@FETCH_STATUS = 0
			BEGIN
			INSERT INTO NOTA_FISCAL_ITENS VALUES
			(@COD_EMPRESA,@NUM_NF,@SEQ_MAT,@COD_MAT,@QTD,@VAL_UNIT,@DOCTO);
			PRINT @@ERROR
			--APRESENTANDO VALORES DO ITENS INSERIDOS
			SELECT @COD_EMPRESA COD_EMPRESA ,@NUM_NF NUM_NF,@SEQ_MAT SEQ ,@COD_MAT COD_MAT,@QTD QTD ,@VAL_UNIT VAL_UNIT,@DOCTO PED_ORIG
			SET @SUB_TOT_NFE=@QTD*@VAL_UNIT;
			SET @TOTAL_NFE=@TOTAL_NFE+@SUB_TOT_NFE;
			--SELECT @TOTAL_NFE
		FETCH NEXT FROM NF_ITENS
		INTO @COD_EMPRESA,@SEQ_MAT,@COD_MAT,@QTD,@VAL_UNIT
		
		END
	   
		CLOSE NF_ITENS;
        DEALLOCATE NF_ITENS;
	--FINAL CURSOR DETALHES

	 --ATUALIZANDO TOTAL NFE
		UPDATE NOTA_FISCAL SET TOTAL_NF=@TOTAL_NFE WHERE COD_EMPRESA=@COD_EMPRESA  AND NUM_NF=@NUM_NF;
		--ATUALIZADO STATUS PARA FECHADO NFE
		UPDATE PED_COMPRAS  SET SITUACAO='F' WHERE COD_EMPRESA=@COD_EMPRESA AND NUM_PEDIDO=@DOCTO;

		FETCH NEXT FROM NOTA_FISCAL
		INTO @COD_EMPRESA,@NUM_PEDIDO,@ID,@COD_PAGTO
	END
	--FINAL CURSOR NFE
	CLOSE NOTA_FISCAL;
    DEALLOCATE NOTA_FISCAL;
  END
  --FIM NOTA FISCAL ENTRADA
 --VALIDACOES FINAIS
	IF @@ERROR <>0
	 BEGIN 
		ROLLBACK TRANSACTION
		PRINT 'OPERACAO CANCELADA'
	 END
	ELSE IF @ERRO_INTERNO=1
		BEGIN
		ROLLBACK TRANSACTION
		PRINT 'OPERACAO CANCELADA COM SUCESSO' 
		END
	ELSE
		BEGIN
		    PRINT 'OPERACAO FINALIZADA COM SUCESSO'
			COMMIT TRANSACTION
		END
END TRY
BEGIN CATCH
SELECT  
        ERROR_NUMBER() AS ErrorNumber,  
        ERROR_SEVERITY() AS ErrorSeverity , 
        ERROR_STATE() AS ErrorState,
        ERROR_PROCEDURE() AS ErrorProcedure , 
        ERROR_LINE() AS ErrorLine,  
        ERROR_MESSAGE() AS ErrorMessage;  

		IF (SELECT CURSOR_STATUS('global', 'NOTA_FISCAL')) = 1 
		BEGIN
			CLOSE NOTA_FISCAL	
			DEALLOCATE NOTA_FISCAL	
		END
		IF (SELECT CURSOR_STATUS('global', 'NF_ITENS')) = 1 
		BEGIN
			CLOSE NF_ITENS	
			DEALLOCATE NF_ITENS	
		END	
		
		SET XACT_ABORT ON;
		IF @@TRANCOUNT > 0  
        ROLLBACK TRANSACTION;  
	 
	END CATCH

END --END PROCEDURE


--TESTANDO
--PARAMETROS @COD_EMPRESA,@TIP_MOV,@DOCTO,@CFOP,@DATA_EMIS,@DATA_ENTREGA
EXEC PROC_GERA_NF 1,'X',1,'1.101','2018-01-30','2018-01-30'  

SELECT * FROM PED_COMPRAS

EXEC PROC_GERA_NF 1,'E',1,'1.101','2018-01-30','2018-01-30'  
EXEC PROC_GERA_NF 1,'E',2,'1.101','2018-01-30','2018-01-30'  
EXEC PROC_GERA_NF 1,'E',3,'1.101','2018-01-30','2018-01-30'  
EXEC PROC_GERA_NF 1,'E',4,'1.101','2018-01-30','2018-01-30' 

EXEC PROC_GERA_NF 1,'S',1,'5.101','2018-01-30','2018-01-30'  
EXEC PROC_GERA_NF 1,'S',2,'5.101','2018-02-28','2018-02-28'  
EXEC PROC_GERA_NF 1,'S',3,'5.101','2018-03-30','2018-03-30'  
EXEC PROC_GERA_NF 1,'S',4,'5.101','2018-04-30','2018-04-30' 
 
/*
SELECT * FROM NOTA_FISCAL_ITENS
SELECT * FROM NOTA_FISCAL
DELETE FROM NOTA_FISCAL_ITENS
DELETE FROM NOTA_FISCAL

SELECT  * FROM PED_VENDAS
SELECT  * FROM PED_COMPRAS
SELECT TOP 1 * FROM NOTA_FISCAL
SELECT TOP 1 * FROM NOTA_FISCAL_ITENS
SELECT TOP 1 * FROM PED_VENDAS_ITENS
SELECT TOP 1 * FROM PED_COMPRAS_ITENS
SELECT * FROM PARAMETROS
UPDATE PARAMETROS SET VALOR=0 WHERE COD_EMPRESA=1 AND PARAM='NOTA_FISCAL'
SELECT * FROM PED_VENDAS
UPDATE PED_VENDAS SET SITUACAO='P' WHERE COD_EMPRESA=1 AND SITUACAO='F'
UPDATE PED_COMPRAS SET SITUACAO='P' WHERE COD_EMPRESA=1 AND SITUACAO='F'
*/
--CONFERINDO QTD NF ITENS X TOTAL NFE
--APENAS LISTANDO DIFERENÇAS SE OCORREREM
SELECT A.COD_EMPRESA, A.NUM_NF,A.TOTAL_NF, SUM(B.QTD*B.VAL_UNIT) TOT_ITENS
FROM NOTA_FISCAL A
INNER JOIN NOTA_FISCAL_ITENS B
ON A.COD_EMPRESA=B.COD_EMPRESA
AND A.NUM_NF=B.NUM_NF
GROUP BY A.COD_EMPRESA, A.NUM_NF,A.TOTAL_NF
HAVING A.TOTAL_NF<>SUM(B.QTD*B.VAL_UNIT)















--EXEC PROC_GERA_ESTOQUE 
--DROP PROCEDURE PROC_INTEGR_NF_ESTOQUE
--CRIACAO PROC_INTEGR_NF_ESTOQUE
---TABELAS ORIGEM NOTA_FISCAL, NOTA_FISCAL_ITENS
--REUTILIZA PROCEDURE PROC_GERA_ESTOQUE
--ATUALIZA STATUS NOTA_FISCAL COMO [INTEGRADA_SUP] =S 
--FASE 6 INTEGRACAO NFE COM ESTOQUE E/S
ALTER  PROCEDURE PROC_INTEGR_NF_ESTOQUE (@COD_EMPRESA INT,
                                          @NUM_NF INT,
										  @DATA_MOVTO DATE)

AS 
 BEGIN 
    SET NOCOUNT ON 
--DECLARANDO VARIAVEIS
DECLARE @TIP_MOV VARCHAR(1), --E ENTRADA, S-SAIDA
        @COD_MAT  VARCHAR(50), 
        @LOTE     VARCHAR(15), 
        @QTD  DECIMAL(10, 2),
		@ERRO_INTERNO INT,
	    --@i int,
        @TIP_NF CHAR(1),
		@COD_MAT_AUX INT,
		@QTD_LOTE DECIMAL(10,2),
		@QTD_ATEND DECIMAL(10,2),
		@SALDO DECIMAL(10,2),
		@SALDO_AUX DECIMAL(10,2),
		@TESTE CHAR(1),
		@Msg VARCHAR(40)
--ATRIBUINDO VALORES
        --SET @i = 9
		SET @QTD_ATEND=0
		SET @SALDO=0
		
       
BEGIN TRANSACTION
--ESTRURA IF ELSE
--VERFICANDO SE EXISTE DOCUMENTO
	IF (SELECT COUNT(*) 
		FROM NOTA_FISCAL WHERE COD_EMPRESA=@COD_EMPRESA AND NUM_NF=@NUM_NF )=0
	BEGIN 
	    SET @ERRO_INTERNO =1;
	END
--VERIFCANDO SE EXISTE E JA ESTA INTEGRADO
	ELSE IF (SELECT TOP 1 A.NUM_NF 
	       FROM NOTA_FISCAL A 
	       WHERE COD_EMPRESA=@COD_EMPRESA 
		   AND  A.NUM_NF=@NUM_NF 
	       AND A.INTEGRADA_SUP='S')=@NUM_NF
	BEGIN 
	     SET @ERRO_INTERNO =2;
	END
--VERIFICANDO SE OPERACAO DE ENTRADA PARA EXCUTAR ENTRADA EM ESTOQUE
	ELSE IF (SELECT COUNT(*) 
		FROM NOTA_FISCAL A
		      WHERE COD_EMPRESA=@COD_EMPRESA
			  AND A.NUM_NF=@NUM_NF 
		      AND A.TIP_NF='E'
		      AND A.INTEGRADA_SUP='N')=1
	BEGIN 
	    PRINT  'OPERACAO DE ENTRADA'
	--INICIA BEGIN TRY
	BEGIN TRY
		DECLARE INTEGRA_ESTOQUE CURSOR FOR
			SELECT A.TIP_NF,B.COD_MAT,
			CONCAT(DATEPART(DAYOFYEAR,GETDATE()),'-',A.NUM_NF) LOTE,
			--COMPOSICAO CAMPO LOTE (DIA DO ANO MAIS NUMERO DA NF)
			B.QTD 
			FROM NOTA_FISCAL A
			INNER JOIN NOTA_FISCAL_ITENS B
			ON  A.COD_EMPRESA=B.COD_EMPRESA
			AND  A.NUM_NF=B.NUM_NF
			WHERE A.COD_EMPRESA=@COD_EMPRESA 
			AND A.NUM_NF=@NUM_NF
			AND A.INTEGRADA_SUP='N' --INTEGRA NOTAS N=NAO

			OPEN INTEGRA_ESTOQUE
			FETCH NEXT FROM INTEGRA_ESTOQUE
			INTO @TIP_MOV,@COD_MAT,@LOTE,@QTD

	WHILE @@FETCH_STATUS = 0 OR @@ERROR<>0
		BEGIN
	   --@TIPO_MOV, @COD_MAT,@LOTE, @QTD_MOV,@DATA_MOVTO
	   --EXECUTANDO PROCEDURE DE ESTOQUE COMO PARAMETROS DO CURSOR
			EXEC PROC_GERA_ESTOQUE @COD_EMPRESA,@TIP_MOV, @COD_MAT,@LOTE, @QTD,@DATA_MOVTO
	
			FETCH NEXT FROM INTEGRA_ESTOQUE
			INTO @TIP_MOV,@COD_MAT,@LOTE,@QTD
        END --END WHILE
	 --ATUALIZANDO STATUS DE INTEGRACÃO NFE
CLOSE INTEGRA_ESTOQUE
DEALLOCATE INTEGRA_ESTOQUE
END TRY --END TRY
    BEGIN CATCH
        SET @ERRO_INTERNO =3;
        print ''
        print 'Erro ocorreu!'
        print 'Mensagem: ' + ERROR_MESSAGE()
        print 'Procedure: ' + ERROR_PROCEDURE()
		
		IF (SELECT CURSOR_STATUS('global', 'INTEGRA_ESTOQUE')) = 1 
		BEGIN
			CLOSE INTEGRA_ESTOQUE	
			DEALLOCATE INTEGRA_ESTOQUE	
		END

END CATCH	

END --END IF ELSE DE CONFERE NOTA DE ENTRADA NAO INTEGRADA

--VERIFICANDO SE OPERACAO DE SAIDA PARA EXCUTAR SAIDA EM ESTOQUE
	ELSE IF (SELECT COUNT(*) 
		FROM NOTA_FISCAL A WHERE COD_EMPRESA=@COD_EMPRESA 
		     AND A.NUM_NF=@NUM_NF 
			 AND A.TIP_NF='S'
		     AND A.INTEGRADA_SUP='N')=1
	BEGIN 
	    PRINT  'OPERACAO DE SAIDA'
	BEGIN TRY
	--CURSOR
	DECLARE LE_NFE_VENDA CURSOR FOR
 
   SELECT A.NUM_NF,A.TIP_NF,B.COD_MAT,B.QTD
		FROM NOTA_FISCAL A
		INNER JOIN NOTA_FISCAL_ITENS B
		ON A.COD_EMPRESA=B.COD_EMPRESA
		AND A.NUM_NF=B.NUM_NF
		WHERE A.COD_EMPRESA=@COD_EMPRESA 
		AND A.INTEGRADA_SUP='N'
		AND A.NUM_NF=@NUM_NF
		AND A.TIP_NF='S'
		ORDER BY B.COD_MAT
	--LENDO CURSOR
OPEN LE_NFE_VENDA
FETCH NEXT FROM LE_NFE_VENDA
	--INSERINDO VALOR NA VARIAVEL
		INTO @NUM_NF,@TIP_NF,@COD_MAT,@QTD
	--INICIANDO REPETICAO
		WHILE @@FETCH_STATUS = 0 
		BEGIN
		 IF (SELECT ISNULL(QTD_SALDO,0) QTD_SALDO FROM ESTOQUE 
		     WHERE COD_EMPRESA=@COD_EMPRESA AND COD_MAT=@COD_MAT)<@QTD
		 OR 
		    (SELECT ISNULL(QTD_SALDO,0) QTD_SALDO FROM ESTOQUE
			 WHERE COD_EMPRESA=@COD_EMPRESA AND COD_MAT=@COD_MAT) IS NULL
		 BEGIN 
		  SET @ERRO_INTERNO=4
		  PRINT 'PASSEI AQUI SALDO'
		  GOTO ERRO4
         END
		 ELSE 
		 BEGIN
		--APRENSENTANDO VALORES **INFORMATIVO
		SELECT @NUM_NF NOTA ,@TIP_NF TIP_NF,@COD_MAT COD_MAT,@QTD QTD
--DECLARANDO CURSOR PARA LER ESTOQUE COM MATERIAIS DA NOTA PARA BAIXA EM ESTOQUE
DECLARE INTEGRA_NFE_VENDA CURSOR FOR

	SELECT C.COD_MAT,C.QTD_LOTE,C.LOTE 
		FROM  ESTOQUE_LOTE C
		WHERE COD_EMPRESA=@COD_EMPRESA 
		AND C.COD_MAT=@COD_MAT
		AND C.QTD_LOTE>0
	ORDER BY C.COD_MAT,C.LOTE
--ABRINDO CURSOR 
OPEN INTEGRA_NFE_VENDA
		FETCH NEXT FROM INTEGRA_NFE_VENDA
--INSERINDO VALOR NAS VARIAVES
		INTO @COD_MAT,@QTD_LOTE,@LOTE 
--ATRIBUNDO VALOR AS VARIAVEIS		
		SET @SALDO=@QTD;
		SET @SALDO_AUX=@SALDO

		WHILE @@FETCH_STATUS = 0 
			BEGIN
--VERIFICAÇOES DE TROCA DE MATERIAL
			  IF @COD_MAT_AUX<>@COD_MAT 
			  BEGIN 
				--SET @QTD_PED_AUX=0
				SET @QTD_ATEND=0
				SET @SALDO=@QTD;
			  END
--VERIFICACOES DE SALDO		 
			  IF @SALDO<=0
			  BEGIN 
			  SET @QTD_ATEND=0
			  END
--ESTRUTURA  DE VERIFICAO DE QUANTIDADE PEDIDO SALDO LOTE E SALDO PEDIDO
			  IF  @SALDO_AUX>=@QTD_LOTE
			  BEGIN 
			      SET  @QTD_ATEND=@QTD_ATEND+@QTD_LOTE
				  SET  @SALDO=@SALDO-@QTD
				  SET  @SALDO_AUX=@SALDO_AUX-@QTD_LOTE
				  SET @TESTE='1'	  
			  END

			  ELSE IF  @SALDO_AUX<@QTD_LOTE
			  BEGIN 
				  SET  @SALDO=@SALDO-(@QTD-@QTD_LOTE)
				  SET  @QTD_ATEND=@QTD_ATEND+@SALDO_AUX
				  SET  @SALDO_AUX=@SALDO_AUX-@QTD_ATEND
				  SET @TESTE='2'
			  END

		--IF PARA INSERIR APENAS RETORNO COM SALDO>=0 E QTD_ATEND>0  

         IF @SALDO_AUX>=0 AND @QTD_ATEND>0
	      BEGIN
			  SELECT @NUM_NF NUM_NF,@TIP_NF TIP_NF ,@COD_MAT COD_MAT,@QTD QTD,
			         @QTD_LOTE QTD_LOTE,@LOTE LOTE,
		             @QTD_ATEND QTD_ATEND,@SALDO_AUX SD_AUX,@TESTE TESTE
		--EXCUTANDO PROCEDURE DE MOV ESTOQUE DENTRO DO IF, RECEBENDO VARIAVEIS
		EXEC PROC_GERA_ESTOQUE @COD_EMPRESA,@TIP_NF, @COD_MAT,@LOTE, @QTD_ATEND,@DATA_MOVTO
		--ATRIBUINDO VALOR VARIAVEL 
		SET @COD_MAT_AUX=@COD_MAT;
	    END
		--LENDO PROXIMA LINHA DO CURSO
		FETCH NEXT FROM INTEGRA_NFE_VENDA
	    INTO @COD_MAT,@QTD_LOTE,@LOTE 
		END	
	--FECHANDO CURSO
	CLOSE INTEGRA_NFE_VENDA
	--DESALOCANDO CURSOR
    DEALLOCATE INTEGRA_NFE_VENDA
  --LENDO PROXIMA LINHA DO CURSOR
  END --FIM DO ELSE QUE VERIFICA ESTOQUE
  FETCH NEXT FROM LE_NFE_VENDA
		INTO @NUM_NF,@TIP_NF,@COD_MAT,@QTD
 --ATUALIZANDO NOTA FISCAL COMO INTEGRADA
 --UPDATE NOTA_FISCAL SET INTEGRADA_SUP='S' WHERE NUM_NF=@NUM_NF;
  
  END
  
  --FECHANDO CURSOR
  CLOSE LE_NFE_VENDA
  --DESALOCANDO CURSOR
  DEALLOCATE LE_NFE_VENDA
  END TRY --END TRY
    BEGIN CATCH
        SET @ERRO_INTERNO =3;
        print ''
        print 'Erro ocorreu!'
        print 'Mensagem: ' + ERROR_MESSAGE()
        print 'Procedure: ' + ERROR_PROCEDURE()

		IF (SELECT CURSOR_STATUS('global', 'LE_NFE_VENDA')) = 1 
		BEGIN
			CLOSE LE_NFE_VENDA	
			DEALLOCATE LE_NFE_VENDA	
		END
			IF (SELECT CURSOR_STATUS('global', 'INTEGRA_NFE_VENDA')) = 1 
		BEGIN
			CLOSE INTEGRA_NFE_VENDA	
			DEALLOCATE INTEGRA_NFE_VENDA	
		END

  END CATCH	
  END --END IF ELSE DE CONFERE NOTA DE SAIDA NAO INTEGRADA

--ULTIMAS VERIFICACOES PARA COMMIT OU ROLLBACK
--LABEL DO GOTO
ERRO4:
   --FECHANDO CURSORES
   IF (SELECT CURSOR_STATUS('global', 'LE_NFE_VENDA')) = 1 
		BEGIN
			CLOSE LE_NFE_VENDA	
			DEALLOCATE LE_NFE_VENDA	
		END
			IF (SELECT CURSOR_STATUS('global', 'INTEGRA_NFE_VENDA')) = 1 
		BEGIN
			CLOSE INTEGRA_NFE_VENDA	
			DEALLOCATE INTEGRA_NFE_VENDA	
		END
--ULTIMAS VERIFICACOES PARA COMMIT OU ROLLBACK
   IF @@ERROR <> 0 
		BEGIN
		  ROLLBACK
		  PRINT @@error
		  PRINT 'OPERACAO CANCELADA' 
		END
	ELSE IF @ERRO_INTERNO=1
		BEGIN
		 ROLLBACK
		  PRINT 'DOCUMENTO NAO EXISTE'	
        END
	ELSE IF @ERRO_INTERNO=2
		BEGIN
		 ROLLBACK
		  PRINT 'DOCUMENTO JA INTEGRADO'
        END
	ELSE IF @ERRO_INTERNO=3
		BEGIN
		 ROLLBACK
		  PRINT 'ERRO NA PROCEDURE DE ESTOQUE'
        END
	ELSE IF @ERRO_INTERNO=4
		BEGIN
		 ROLLBACK
		  PRINT 'SALDO INSUFICIENTE'
        END
	ELSE
		BEGIN
		    UPDATE NOTA_FISCAL SET INTEGRADA_SUP='S' 
			 WHERE COD_EMPRESA=@COD_EMPRESA
			 AND NUM_NF=@NUM_NF;
			COMMIT
		    PRINT 'INTEGRACAO CONCLUIDA'
		END 

END --FIM PROC

--LIMPANDO TABELAS DE ESTOQUE COM TESTES MANUAIS
DELETE  FROM ESTOQUE_LOTE
DELETE FROM ESTOQUE
DELETE FROM ESTOQUE_MOV
SELECT * FROM ESTOQUE
SELECT * FROM ESTOQUE_MOV
SELECT * FROM ESTOQUE_LOTE
--TESTANDO PROCEDURE 
--PARAMETROS @COD_EMPRESA,@NUM_NF,@DATA_MOVTO
SELECT * FROM NOTA_FISCAL

EXECUTE PROC_INTEGR_NF_ESTOQUE 1,1,'01-01-2018' --ENTRADA
EXECUTE PROC_INTEGR_NF_ESTOQUE 1,2,'01-01-2018' --ENTRADA
EXECUTE PROC_INTEGR_NF_ESTOQUE 1,3,'01-01-2018' --ENTRADA
EXECUTE PROC_INTEGR_NF_ESTOQUE 1,4,'01-01-2018' --ENTRADA

EXECUTE PROC_INTEGR_NF_ESTOQUE 1,5,'01-01-2018' --SAIDA

-- UPDATE NOTA_FISCAL SET INTEGRADA_SUP='N';
 
--SELECT * FROM NOTA_FISCAL
--UPDATE NOTA_FISCAL SET INTEGRADA_SUP='N'
/*
SELECT * FROM ESTOQUE
SELECT * FROM ESTOQUE_MOV
SELECT * FROM ESTOQUE_LOTE
*/

--SELECT * FROM PED_VENDAS_ITENS



















--SELECT * FROM CONTAS_PAGAR
--SELECT * FROM CONTAS_RECEBER
--PROCEDURE INTEGRA CAP E CRE
--ORIGEM NOTA_FISCAL ENTRADA SAIDA
--SE SAIDA DESTINO CONTAS A RECEBER
--SE ENTRADA DESTINO CONTAS A PAGAR
--ATUALIZA NOTA FISCAL INTEGRA_FIN=S
--SEM PARAMETROS EXTERNOS, APENAS INTERNOS
--FASE 7 INTEGRACAO NFE COM FINANCEIRO CAP E CRE
--EXEC PROC_INTEGR_FIN
--DROP PROCEDURE PROC_INTEGR_FIN
CREATE PROCEDURE PROC_INTEGR_FIN (@COD_EMPRESA INT)
AS 
    SET NOCOUNT ON 
	
DECLARE @TIP_NF CHAR(1),
        @NUM_NF INT,
		@ID_CLIFOR DECIMAL(10,2),
		@COD_PAGTO INT,
		@DATA_EMISSAO DATE,
		@VENCIMENTO DATE,
		@TOTAL_NF DECIMAL(10,2),
		@VALOR_PARC DECIMAL(10,2),
		@PARC INT,
		@CONT_PARC INT,
		@ERRO_INTERNO INT
BEGIN
 BEGIN TRANSACTION
 BEGIN TRY
--ABRINDO PRIMEIRO IF VERIFICAR SE EXISTE NOTA PARA INTEGRAR
	IF (SELECT COUNT(*) FROM NOTA_FISCAL WHERE COD_EMPRESA=@COD_EMPRESA AND INTEGRADA_FIN='N')=0
	BEGIN
		SET @ERRO_INTERNO=1;
	END
	ELSE
	BEGIN
--DECLARANDO CURSOR CONTA PARCELAS
 DECLARE CONTPARC CURSOR FOR
 --LENDO TABELA QTD PARCELAS POR NF
	 SELECT A.NUM_NF,COUNT(*) CONT_PARC
	   FROM NOTA_FISCAL A
	   INNER JOIN COND_PAGTO_DET B
		 ON A.COD_PAGTO=B.COD_PAGTO
	   WHERE A.COD_EMPRESA=@COD_EMPRESA 
	   AND A.INTEGRADA_FIN='N'
	   GROUP BY A.NUM_NF
   --ABRINDO CURSOR
   OPEN CONTPARC
   --LENDO PRIMEIRO REGISTRO
   FETCH NEXT FROM CONTPARC
   --INSERINDO VALORES NA VARIAVEL
   INTO @NUM_NF,@CONT_PARC
   -- Percorrendo linhas do cursor (enquanto houverem)
   WHILE @@FETCH_STATUS = 0
	BEGIN
   --DECLARANDO CURSOR PARA INTEGRAR PARCELAS
   DECLARE INTEGRA_FIN CURSOR FOR
   --SELECIONANDO REGISTROS
   SELECT A.TIP_NF,A.NUM_NF,A.ID_CLIFOR,A.COD_PAGTO,
		  A.DATA_EMISSAO,
		  CAST(DATEADD(dd,B.DIAS,A.DATA_EMISSAO) AS DATE)VENCIMENTO,
		  A.TOTAL_NF,
		  CAST(A.TOTAL_NF/100*B.PCT AS DECIMAL(10,2)) VALOR_PARC,
		  B.PARC
   FROM NOTA_FISCAL A  
   INNER JOIN COND_PAGTO_DET B
     ON A.COD_PAGTO=B.COD_PAGTO
   WHERE COD_EMPRESA=@COD_EMPRESA 
   AND A.INTEGRADA_FIN='N'
   AND NUM_NF=@NUM_NF
   --ABRINDO CURSOR 
   OPEN INTEGRA_FIN
   --LENDO PROXIMA LINHA
   FETCH NEXT FROM INTEGRA_FIN
   --INSERINDO VALORES NA VARIAVEL
   INTO @TIP_NF,@NUM_NF,@ID_CLIFOR,@COD_PAGTO,@DATA_EMISSAO,
		@VENCIMENTO,@TOTAL_NF,@VALOR_PARC,@PARC
  -- Percorrendo linhas do cursor (enquanto NAO houverem ERROS)
  WHILE @@FETCH_STATUS = 0
	BEGIN
	--IF PARA INTEGRAR NOTAS DE VENDAS SAIDAS
	IF @TIP_NF='S'
	 BEGIN 
		INSERT INTO CONTAS_RECEBER VALUES (@COD_EMPRESA,@ID_CLIFOR,@NUM_NF,@PARC,@VENCIMENTO,NULL,@VALOR_PARC);
		SELECT  'DOCTO  VENDAS',@NUM_NF ,'INTEGRADO COM SUCESSO ','PARCELA ',@PARC,'VALOR ', @VALOR_PARC	
	 END
	--IF PARA INTEGRAR NOTAS DE COMPRAS ENTRADASS
	ELSE IF @TIP_NF='E'
	BEGIN 
		 INSERT INTO CONTAS_PAGAR VALUES (@COD_EMPRESA,@ID_CLIFOR,@NUM_NF,@PARC,@VENCIMENTO,NULL,@VALOR_PARC);
		 SELECT  'DOCTO  COMPRAS',@NUM_NF ,'INTEGRADO COM SUCESSO ','PARCELA ',@PARC,'VALOR ', @VALOR_PARC			
	END
    --IF PARA ATUALIZAR STATUS NA NF
	IF @CONT_PARC=@PARC
	BEGIN
	  --ATUALIZANDO STATUS DE NOTA FISCAL PARA INTEGRADA_FIN=S
	SELECT 'ATUALIZA '+CAST(@NUM_NF AS VARCHAR(100))
    UPDATE NOTA_FISCAL SET INTEGRADA_FIN='S' WHERE COD_EMPRESA=@COD_EMPRESA AND NUM_NF=@NUM_NF;
	END 
	--LENDO PROXIMAS LINHAS DO CURSOR
	FETCH NEXT FROM INTEGRA_FIN
    INTO @TIP_NF,@NUM_NF,@ID_CLIFOR,@COD_PAGTO,@DATA_EMISSAO,
		@VENCIMENTO,@TOTAL_NF,@VALOR_PARC,@PARC;

   END --FINAL WHILE
  
   CLOSE INTEGRA_FIN
   DEALLOCATE INTEGRA_FIN
   --LENDO PROXIMA LINHA DO CURSOR
   FETCH NEXT FROM CONTPARC
   INTO @NUM_NF,@CONT_PARC

  END --FINAL WHILE
   CLOSE CONTPARC
   DEALLOCATE CONTPARC
   
END --END DO PRIMEIRO ELSE IF
END TRY
BEGIN CATCH
	SELECT  
        ERROR_NUMBER() AS ErrorNumber,  
        ERROR_SEVERITY() AS ErrorSeverity , 
        ERROR_STATE() AS ErrorState,
        ERROR_PROCEDURE() AS ErrorProcedure , 
        ERROR_LINE() AS ErrorLine,  
        ERROR_MESSAGE() AS ErrorMessage;  

		IF (SELECT CURSOR_STATUS('global', 'INTEGRA_FIN')) = 1 
		BEGIN
			CLOSE INTEGRA_FIN	
			DEALLOCATE INTEGRA_FIN	
		END
		IF (SELECT CURSOR_STATUS('global', 'CONTPARC')) = 1 
		BEGIN
			CLOSE CONTPARC	
			DEALLOCATE CONTPARC	
		END	
		
		SET XACT_ABORT ON;
		IF @@TRANCOUNT > 0  
        ROLLBACK TRANSACTION; 
END CATCH

--VERIFICACOES FINAIS
   IF @@ERROR <> 0 
		BEGIN
		  ROLLBACK TRANSACTION
		  PRINT @@error
		  PRINT 'OPERACAO CANCELADA' 
		END
	ELSE IF @ERRO_INTERNO=1
	BEGIN 
	    ROLLBACK TRANSACTION 
		PRINT 'NAO A DOCUMENTOS PARA SEREM PROCESSADOS'
	END
	ELSE
		BEGIN
			COMMIT TRANSACTION
		     PRINT 'INTEGRACAO CONCLUIDA'
		END 
END
--FIM PROCEDURES

EXECUTE PROC_INTEGR_FIN 1


